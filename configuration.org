#+TITLE: mpereira's emacs configuration
#+AUTHOR: Murilo Pereira <murilo@murilopereira.com>

:PROPERTIES:
:TOC:      ignore
:END:

Vanilla evil emacs literate configuration.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 3
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#dependencies][Dependencies]]
- [[#silent-exports-for-emacs-lisp-org-babel-code-blocks][Silent exports for emacs lisp org babel code blocks]]
- [[#quelpa-and-quelpa-use-package][quelpa and quelpa-use-package]]
- [[#utility-libraries][Utility libraries]]
  - [[#async][async]]
  - [[#aio][aio]]
  - [[#cl-lib][cl-lib]]
  - [[#s][s]]
  - [[#dash][dash]]
  - [[#thingatpt][thingatpt+]]
  - [[#help-fns][help-fns+]]
  - [[#ts][ts]]
- [[#package-management-foundational][Package management, foundational]]
  - [[#general][general]]
  - [[#paradox][paradox]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
- [[#variables][Variables]]
- [[#redefinitions-advices][Redefinitions, advices]]
  - [[#make-org-src-buffer-name-shorter-and-nicer][Make org src buffer name shorter and nicer]]
  - [[#improve-lisp-code-indentation][Improve Lisp code indentation]]
  - [[#archive-org-subtrees-under-the-same-hierarchy-as-the-original-in-the-archive-files][Archive org subtrees under the same hierarchy as the original in the archive files]]
  - [[#provide-counsel-symbol-at-point][Provide counsel-symbol-at-point]]
- [[#helper-functions][Helper functions]]
- [[#toggle-buffer-maximize][Toggle buffer maximize]]
- [[#reload-directory-local-variables-when-saving-dir-localsel-files][Reload directory local variables when saving .dir-locals.el files]]
- [[#asynchronous-undo-tree-history-save][Asynchronous undo-tree history save]]
- [[#asynchronous-org-babel-tangle-org-toc-generation-and-byte-recompilation][Asynchronous Org Babel tangle, Org TOC generation and byte recompilation]]
- [[#tramp][Tramp]]
  - [[#counsel-tramp][counsel-tramp]]
- [[#server][Server]]
- [[#options][Options]]
- [[#performance][Performance]]
  - [[#increase-the-amount-of-data-read-from-processes][Increase the amount of data read from processes]]
  - [[#make-cursor-movement-an-order-of-magnitude-faster][Make cursor movement an order of magnitude faster]]
  - [[#start-up-profiler-esup][Start-up profiler: esup]]
  - [[#explain-pause-mode][explain-pause-mode]]
- [[#color-theme][Color theme]]
  - [[#create-hook-for-theme-change][Create hook for theme change]]
  - [[#change-themes-when-changing-macos-light-or-dark-appearance][Change themes when changing MacOS light or dark appearance]]
- [[#configure-mode-line][Configure Mode Line]]
- [[#configure-header-line][Configure Header Line]]
- [[#vi-emulation][Vi emulation]]
  - [[#evil][evil]]
  - [[#evil-org][evil-org]]
  - [[#evil-magit][evil-magit]]
  - [[#evil-extra-operator][evil-extra-operator]]
  - [[#evil-exchange][evil-exchange]]
  - [[#evil-nerd-commenter][evil-nerd-commenter]]
  - [[#evil-surround][evil-surround]]
  - [[#evil-matchit][evil-matchit]]
  - [[#evil-lion][evil-lion]]
  - [[#evil-string-inflection][evil-string-inflection]]
  - [[#evil-goggles][evil-goggles]]
  - [[#evil-multiedit][evil-multiedit]]
  - [[#evil-owl][evil-owl]]
  - [[#evil-collection][evil-collection]]
- [[#org][Org]]
  - [[#org-mode][org-mode]]
  - [[#org-babel][Org Babel]]
    - [[#verb][verb]]
    - [[#org-babel][org-babel]]
    - [[#prevent-oo-evil-open-belowabove-from-scrolling-window][Prevent o/O (evil-open-below/above) from scrolling window]]
  - [[#align-all-tags-in-the-buffer-on-tag-changes][Align all tags in the buffer on tag changes]]
  - [[#sort-org-entries-by-multiple-properties][Sort org entries by multiple properties]]
  - [[#org-clock][Org clock]]
  - [[#org-gcal][org-gcal]]
  - [[#org-agenda][Org agenda]]
  - [[#my-custom-persistent-cached-org-agendas][My custom persistent (cached) org agendas]]
    - [[#agenda-library][Agenda library]]
    - [[#main-agenda][Main agenda]]
    - [[#review-agenda][Review agenda]]
    - [[#common][Common]]
  - [[#counsel-org-clock][counsel-org-clock]]
  - [[#org-web-tools][org-web-tools]]
  - [[#org-expiry][org-expiry]]
  - [[#org-bullets][org-bullets]]
  - [[#org-make-toc][org-make-toc]]
  - [[#org-tree-slide][org-tree-slide]]
  - [[#org-sidebar][org-sidebar]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#org-archive-hierarchically][org-archive-hierarchically]]
  - [[#org-autonum][org-autonum]]
  - [[#ob-async][ob-async]]
  - [[#ox-jira][ox-jira]]
  - [[#ox-confluence][ox-confluence]]
  - [[#ox-twbs][ox-twbs]]
  - [[#ox-gfm][ox-gfm]]
  - [[#ox-slimhtml][ox-slimhtml]]
  - [[#ox-hugo][ox-hugo]]
  - [[#ox-pandoc][ox-pandoc]]
- [[#file-management][File management]]
  - [[#dired][dired]]
  - [[#dired-show-readme][dired-show-readme]]
  - [[#dired-subtree][dired-subtree]]
  - [[#reveal-in-osx-finder][reveal-in-osx-finder]]
- [[#shell-terminal][Shell, terminal]]
  - [[#with-editor][with-editor]]
  - [[#xterm-color][xterm-color]]
  - [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#vterm][vterm]]
  - [[#term][term]]
  - [[#eterm-256color][eterm-256color]]
  - [[#configure-xterm-color][Configure xterm-color]]
  - [[#fish-completion][fish-completion]]
  - [[#load-bash-alias][load-bash-alias]]
- [[#ui][UI]]
  - [[#posframe][posframe]]
  - [[#ivy-posframe][ivy-posframe]]
  - [[#too-long-lines-mode][too-long-lines-mode]]
  - [[#company-posframe][company-posframe]]
  - [[#company-box][company-box]]
  - [[#default-text-scale][default-text-scale]]
  - [[#minibuffer-line][minibuffer-line]]
  - [[#highlight-indent-guide][highlight-indent-guide]]
  - [[#hideshow][hideshow]]
  - [[#beacon][beacon]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#dimmer][dimmer]]
  - [[#all-the-icons][all-the-icons]]
  - [[#dired-sidebar][dired-sidebar]]
  - [[#all-the-icons-dired][all-the-icons-dired]]
  - [[#emojify][emojify]]
  - [[#ivy-rich][ivy-rich]]
    - [[#run-ivy-rich-mode-only-after-loading-all-the-icons-ivy-rich][Run ivy-rich-mode only after loading all-the-icons-ivy-rich]]
  - [[#all-the-icons-ivy-rich][all-the-icons-ivy-rich]]
- [[#movement][Movement]]
  - [[#bm][bm]]
  - [[#avy][avy]]
  - [[#goto-address-mode][goto-address-mode]]
  - [[#dumb-jump][dumb-jump]]
  - [[#frog-jump-buffer][frog-jump-buffer]]
  - [[#link-hint][link-hint]]
- [[#text-search-and-manipulation][Text search and manipulation]]
  - [[#swiper][swiper]]
  - [[#ripgrep][ripgrep]]
  - [[#wgrep][wgrep]]
  - [[#double-saber][double-saber]]
  - [[#symbol-overlay][symbol-overlay]]
  - [[#expand-region][expand-region]]
  - [[#ialign][ialign]]
  - [[#yasnippet][yasnippet]]
  - [[#yasnippet-snippets][yasnippet-snippets]]
  - [[#add-yasnippet-support-for-all-company-backends][Add yasnippet support for all company backends]]
  - [[#electric-pair-mode][electric-pair-mode]]
  - [[#undo-tree][undo-tree]]
  - [[#move-text][move-text]]
  - [[#unfill][unfill]]
  - [[#string-inflection][string-inflection]]
  - [[#format-all][format-all]]
  - [[#blacken][blacken]]
  - [[#prettier][prettier]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#forge][forge]]
  - [[#magit-todos][magit-todos]]
  - [[#gist][gist]]
  - [[#gitignore-mode][gitignore-mode]]
  - [[#git-timemachine][git-timemachine]]
  - [[#browse-at-remote][browse-at-remote]]
- [[#software-development][Software development]]
  - [[#flycheck][Flycheck]]
    - [[#flycheck][flycheck]]
    - [[#flycheck-posframe][flycheck-posframe]]
  - [[#lsp][LSP]]
    - [[#lsp-mode][lsp-mode]]
    - [[#lsp-python-ms][lsp-python-ms]]
    - [[#lsp-ui][lsp-ui]]
    - [[#company-lsp][company-lsp]]
  - [[#company-mode][company-mode]]
  - [[#aggressive-indent][aggressive-indent]]
  - [[#lisp][LISP]]
    - [[#lispy][lispy]]
    - [[#lispyville][lispyville]]
  - [[#emacs-lisp][Emacs Lisp]]
  - [[#java][Java]]
    - [[#meghanada][meghanada]]
  - [[#clojure][Clojure]]
    - [[#clojure-mode][clojure-mode]]
    - [[#clj-refactor][clj-refactor]]
    - [[#inf-clojure][inf-clojure]]
    - [[#cider][cider]]
    - [[#slamhound][slamhound]]
    - [[#miracle][miracle]]
  - [[#go][Go]]
    - [[#go-mode][go-mode]]
  - [[#rust][Rust]]
    - [[#rust-mode][rust-mode]]
    - [[#racer][racer]]
    - [[#flycheck-rust][flycheck-rust]]
    - [[#ob-rust][ob-rust]]
  - [[#kotlin][Kotlin]]
    - [[#kotlin-mode][kotlin-mode]]
    - [[#flycheck-kotlin][flycheck-kotlin]]
  - [[#c][C#]]
  - [[#javascript][JavaScript]]
  - [[#shell-script][Shell script]]
  - [[#python][Python]]
    - [[#elpy][elpy]]
  - [[#json][JSON]]
    - [[#json-mode][json-mode]]
    - [[#json-navigator][json-navigator]]
    - [[#json-snatcher][json-snatcher]]
  - [[#scala][Scala]]
    - [[#scala-mode][scala-mode]]
  - [[#sql][SQL]]
  - [[#es-mode][es-mode]]
  - [[#terraform-mode][terraform-mode]]
  - [[#docker][docker]]
  - [[#dockerfile-mode][dockerfile-mode]]
  - [[#literate-calc-mode][literate-calc-mode]]
- [[#web-development][Web development]]
  - [[#web-mode][web-mode]]
  - [[#auto-rename-tag][auto-rename-tag]]
  - [[#css][css]]
  - [[#js2-refactor][js2-refactor]]
  - [[#rjsx-mode][rjsx-mode]]
  - [[#emacs-colorpicker][emacs-colorpicker]]
- [[#writing-prose][Writing prose]]
  - [[#flyspell][flyspell]]
  - [[#flyspell-correct-ivy][flyspell-correct-ivy]]
  - [[#mw-thesaurus][mw-thesaurus]]
  - [[#atomic-chrome][atomic-chrome]]
- [[#distraction-free-editing][Distraction-free editing]]
  - [[#hide-mode-line][hide-mode-line]]
  - [[#olivetti][olivetti]]
- [[#buffer-management][Buffer management]]
  - [[#transpose-frame][transpose-frame]]
  - [[#buffer-expose][buffer-expose]]
  - [[#buffer-move][buffer-move]]
  - [[#rotate][rotate]]
  - [[#persistent-scratch][persistent-scratch]]
  - [[#prevent-scratch-buffers-from-being-killed][Prevent scratch buffers from being killed]]
  - [[#display-buffer-alist-configuration][display-buffer-alist configuration]]
- [[#project-management][Project management]]
  - [[#projectile][projectile]]
  - [[#term-projectile][term-projectile]]
  - [[#ibuffer-projectile][ibuffer-projectile]]
  - [[#perspective][perspective]]
  - [[#counsel][counsel]]
  - [[#persp-projectile][persp-projectile]]
  - [[#counsel-projectile][counsel-projectile]]
  - [[#find-file-in-project][find-file-in-project]]
- [[#commands][Commands]]
  - [[#amx][amx]]
  - [[#ivy][ivy]]
  - [[#prescient][prescient]]
  - [[#ivy-prescient][ivy-prescient]]
  - [[#company-prescient][company-prescient]]
- [[#help][Help]]
  - [[#helpful][helpful]]
  - [[#discover-my-major][discover-my-major]]
  - [[#which-key][which-key]]
  - [[#dash-at-point][dash-at-point]]
  - [[#command-log-mode][command-log-mode]]
- [[#markup][Markup]]
  - [[#markdown-mode][markdown-mode]]
  - [[#toml-mode][toml-mode]]
  - [[#yaml-mode][yaml-mode]]
  - [[#htmlize][htmlize]]
  - [[#grip-mode][grip-mode]]
- [[#interactions-with-websites][Interactions with websites]]
  - [[#counsel-web][counsel-web]]
  - [[#stackoverflow][stackoverflow]]
  - [[#engine-mode][engine-mode]]
  - [[#google-this][google-this]]
  - [[#wolfram-alpha][Wolfram Alpha]]
  - [[#hackernews][hackernews]]
- [[#miscellaneous][Miscellaneous]]
  - [[#suggest][suggest]]
  - [[#open-junk-file][open-junk-file]]
  - [[#gif-screencast][gif-screencast]]
  - [[#disk-usage][disk-usage]]
  - [[#circe][circe]]
  - [[#mingus][mingus]]
  - [[#osascripts][osascripts]]
- [[#mappings][Mappings]]
- [[#fun][Fun]]
  - [[#fireplace][fireplace]]
  - [[#let-it-snow][let-it-snow]]
- [[#tips-and-tricks][Tips and tricks]]
  - [[#org-mode-file-links-to-search-patterns-cant-start-with-open-parens][org mode file links to search patterns can't start with open parens]]
  - [[#expression-can-be-used-only-once-per-org-agenda-prefix-format][EXPRESSION can be used only once per org-agenda-prefix-format]]
  - [[#emulate-c-u-universal-argument][Emulate C-u (universal-argument)]]
    - [[#for-raw-prefix-arg-interactive-p][For raw prefix arg (interactive "P")]]
    - [[#otherwise][Otherwise]]
  - [[#after-modifying-path][After modifying PATH]]
  - [[#terminate-initel-loading-early][Terminate init.el loading early]]
  - [[#change-font-m-x-x-select-font][Change font: M-x x-select-font]]
  - [[#when-melpaorg-is-down][When melpa.org is down]]
- [[#sandbox-not-tangled][Sandbox (not tangled)]]
- [[#file-local-variables][File-local variables]]
:END:

* Dependencies

Some dependencies are installed with the =setup.sh= script, which is tangled
from this file.

Getting the file name:
#+name: configuration-org-file
#+begin_src emacs-lisp :results silent :exports none
(let ((inhibit-message t)
      (message-log-max nil))
  (prin1 (buffer-name)))
#+end_src

=setup.sh= preamble:
#+begin_src bash :tangle setup.sh :results verbatim :noweb yes
#!/usr/bin/env bash

# This file is auto-generated by Emacs via `(org-babel-tangle-file "<<configuration-org-file()>>")'.

set -euxo pipefail
#+end_src

Other dependencies have to be manually set up:
- [[https://github.com/settings/tokens][GitHub personal token]] (for magit, gist, etc.)
- [[http://developer.wolframalpha.com/portal/myapps/][Wolfram Alpha AppID]] (for wolfram)
- TODO: Google Apps Calendar (for org-gcal)
- =~/.emacs.d/circe-secrets.el=
  - =mpereira/secret-circe-nickserv-password=
- =~/.emacs.d/org-gcal-secrets.el=
  - =mpereira/secret-org-gcal-client-id=
  - =mpereira/secret-org-gcal-client-secret=
  - =mpereira/secret-org-gcal-file-alist=
- =~/.emacs.d/wolfram-secrets.el=
  - =mpereira/secret-wolfram-alpha-app-id=

* Silent exports for emacs lisp org babel code blocks
Having this as an org file property doesn't seem to work for some reason.

#+begin_src emacs-lisp
:PROPERTIES:
:header-args: :results output silent :exports both
:END:
#+end_src

Set it with emacs lisp.

#+begin_src emacs-lisp :tangle yes
(setq org-babel-default-header-args:emacs-lisp '((:results . "output silent")))
#+end_src

* quelpa and quelpa-use-package
#+begin_src emacs-lisp :tangle yes
(use-package quelpa
  :config
  (quelpa
   '(quelpa-use-package
     :fetcher github
     :repo "quelpa/quelpa-use-package"))
  (require 'quelpa-use-package))
#+end_src

* Utility libraries
** async
#+begin_src emacs-lisp :tangle yes
(use-package async)
#+end_src

** aio
#+begin_src emacs-lisp :tangle yes
(use-package aio)
#+end_src

** cl-lib
#+begin_src emacs-lisp :tangle yes
(use-package cl-lib)
#+end_src

** s
#+begin_src emacs-lisp :tangle yes
(use-package s)
#+end_src

** dash
#+begin_src emacs-lisp :tangle yes
(use-package dash)
#+end_src

** thingatpt+
#+begin_src emacs-lisp :tangle yes
(use-package thingatpt+
  :ensure nil
  :quelpa (thingatpt+
           :url "https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/thingatpt+.el"
           :fetcher url))
#+end_src

** help-fns+
#+begin_src emacs-lisp :tangle yes
(use-package help-fns+
  :ensure nil
  :quelpa (help-fns+
           :fetcher github
           :repo "emacsmirror/help-fns-plus"))
#+end_src

** ts
#+begin_src emacs-lisp :tangle yes
(use-package ts
  :ensure nil
  :quelpa (ts
           :fetcher github
           :repo "alphapapa/ts.el"))
#+end_src

* Package management, foundational
** general
#+begin_src emacs-lisp :tangle yes
(use-package general)
#+end_src

** paradox
#+begin_src emacs-lisp :tangle yes
(use-package paradox
  :config
  (paradox-enable)

  ;; Disable annoying "do you want to set up GitHub integration" prompt.
  ;; https://github.com/Malabarba/paradox/issues/23
  (setq paradox-github-token t))
#+end_src

** exec-path-from-shell
This needs to be loaded before code that depends on PATH modifications, e.g.
~executable-find~.

#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (dolist (shell-variable '("SSH_AUTH_SOCK"
                            "SSH_AGENT_PID"))
    (add-to-list 'exec-path-from-shell-variables shell-variable))
  (exec-path-from-shell-initialize))
#+end_src

* Variables
#+begin_src emacs-lisp :tangle yes
(setq mpereira/custom-file (expand-file-name "custom.el" user-emacs-directory))

(setq mpereira/leader ",")

(setq mpereira/light-theme 'doom-one-light)
(setq mpereira/dark-theme 'doom-one)
(setq mpereira/initial-theme mpereira/dark-theme)

(setq mpereira/dropbox-directory (file-name-as-directory
                                  (expand-file-name "~/Dropbox")))
(setq mpereira/org-directory (expand-file-name "org" mpereira/dropbox-directory))

(setq mpereira/org-calendar-file (expand-file-name "gcal/calendar.org"
                                                   mpereira/org-directory))
(setq mpereira/org-calendar-buffer-name (file-name-nondirectory
                                         mpereira/org-calendar-file))
;; Empirically, 2 seconds seems to be good enough.
(setq mpereira/org-gcal-request-timeout 2)

(setq mpereira/fill-column 80)
(setq mpereira/fill-column-wide 120)

(setq mpereira/eshell-prompt-max-directory-length 50)
(setq mpereira/mode-line-max-directory-length 15)
#+end_src

* Redefinitions, advices
** Make org src buffer name shorter and nicer
Before
#+begin_src text
*Org Src configuration.org[ emacs-lisp ]*
*Org Src configuration.org[ emacs-lisp ]<2>*
#+end_src

After
#+begin_src text
configuration.org (org src)
configuration.org (org src)<2>
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun org-src--construct-edit-buffer-name (org-buffer-name lang)
  "Construct the buffer name for a source editing buffer."
  (concat org-buffer-name " (org src)"))
#+end_src

** Improve Lisp code indentation
Before
#+begin_src emacs-lisp :tangle no
(:foo bar
      :baz qux)
#+end_src

After
#+begin_src emacs-lisp :tangle no
(:foo bar
 :baz qux)
#+end_src

I got this from [[https://github.com/Fuco1/.emacs.d/blob/a8230343bb7e2f07f5eac8e63e5506fa164344f6/site-lisp/my-redef.el#L25][Fuco1/.emacs.d/site-lisp/my-redef.el]].

#+begin_src emacs-lisp :tangle yes
(eval-after-load "lisp-mode"
  '(defun lisp-indent-function (indent-point state)
     "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine if the arguments of
a Lisp function call should be indented specially. INDENT-POINT is the position
at which the line being indented begins. Point is located at the point to indent
under (for default indentation); STATE is the `parse-partial-sexp' state for
that position. If the current line is in a call to a Lisp function that has a
non-nil property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent. The property value can be: * `defun', meaning indent
`defun'-style \(this is also the case if there is no property and the function
has a name that begins with \"def\", and three or more arguments); * an integer
N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
     (let ((normal-indent (current-column))
           (orig-point (point)))
       (goto-char (1+ (elt state 1)))
       (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
       (cond
        ;; car of form doesn't seem to be a symbol, or is a keyword
        ((and (elt state 2)
              (or (not (looking-at "\\sw\\|\\s_"))
                  (looking-at ":")))
         (if (not (> (save-excursion (forward-line 1) (point))
                     calculate-lisp-indent-last-sexp))
             (progn (goto-char calculate-lisp-indent-last-sexp)
                    (beginning-of-line)
                    (parse-partial-sexp (point)
                                        calculate-lisp-indent-last-sexp 0 t)))
         ;; Indent under the list or under the first sexp on the same
         ;; line as calculate-lisp-indent-last-sexp.  Note that first
         ;; thing on that line has to be complete sexp since we are
         ;; inside the innermost containing sexp.
         (backward-prefix-chars)
         (current-column))
        ((and (save-excursion
                (goto-char indent-point)
                (skip-syntax-forward " ")
                (not (looking-at ":")))
              (save-excursion
                (goto-char orig-point)
                (looking-at ":")))
         (save-excursion
           (goto-char (+ 2 (elt state 1)))
           (current-column)))
        (t
         (let ((function (buffer-substring (point)
                                           (progn (forward-sexp 1) (point))))
               method)
           (setq method (or (function-get (intern-soft function)
                                          'lisp-indent-function)
                            (get (intern-soft function) 'lisp-indent-hook)))
           (cond ((or (eq method 'defun)
                      (and (null method)
                           (> (length function) 3)
                           (string-match "\\`def" function)))
                  (lisp-indent-defform state indent-point))
                 ((integerp method)
                  (lisp-indent-specform method state
                                        indent-point normal-indent))
                 (method
                  (funcall method indent-point state)))))))))
#+end_src

** Archive org subtrees under the same hierarchy as the original in the archive files
I got this from [[https://github.com/Fuco1/.emacs.d/blob/b55c7e85d87186f16c395bd35f289da0b5bb84b1/files/org-defs.el#L1582-L1619][Fuco1/.emacs.d/files/org-defs.el]].

FIXME: I've been having issues with archiving lately because this defadvice
became incompatible with newer versions of org. Fuco1 is [[https://github.com/Fuco1/.emacs.d/issues/60][thinking of turning it
into a package]]. For now I'm making this source block not be tangled and using
[[https://gitlab.com/andersjohansson/org-archive-hierarchically][andersjohansson/org-archive-hierarchically]] instead.

Not tangled!
#+begin_src emacs-lisp :tangle no
(defadvice org-archive-subtree (around fix-hierarchy activate)
  (let* ((fix-archive-p (and (not current-prefix-arg)
                             (not (use-region-p))))
         (afile (org-extract-archive-file (org-get-local-archive-location)))
         (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
    ad-do-it
    (when fix-archive-p
      (with-current-buffer buffer
        (goto-char (point-max))
        (while (org-up-heading-safe))
        (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
               (path (and olpath (split-string olpath "/")))
               (level 1)
               tree-text)
          (when olpath
            (org-mark-subtree)
            (setq tree-text (buffer-substring (region-beginning) (region-end)))
            (let (this-command) (org-cut-subtree))
            (goto-char (point-min))
            (save-restriction
              (widen)
              (-each path
                (lambda (heading)
                  (if (re-search-forward
                       (rx-to-string
                        `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                      (org-narrow-to-subtree)
                    (goto-char (point-max))
                    (unless (looking-at "^")
                      (insert "\n"))
                    (insert (make-string level ?*)
                            " "
                            heading
                            "\n"))
                  (cl-incf level)))
              (widen)
              (org-end-of-subtree t t)
              (org-paste-subtree level tree-text))))))))
#+end_src

** Provide ~counsel-symbol-at-point~
~counsel-symbol-at-point~ was removed from counsel so I'm adding a version I found
on the internet here.

#+begin_src emacs-lisp :tangle yes
(defun counsel-symbol-at-point ()
  "Return current symbol at point as a string."
  (let ((s (thing-at-point 'symbol)))
    (and (stringp s)
         (if (string-match "\\`[`']?\\(.*?\\)'?\\'" s)
             (match-string 1 s)
           s))))
#+end_src

* Helper functions
#+begin_src emacs-lisp :tangle yes
(defmacro comment (&rest body)
  "Comment out one or more s-expressions."
  nil)

(defmacro print-and-return (&rest body)
  "TODO: docstring."
  (let ((result-symbol (make-symbol "result")))
    `(let ((,result-symbol ,@body))
       (message "************************************************************")
       (pp ',@body)
       (message "||")
       (message "\\/")
       (print ,result-symbol)
       (message "************************************************************")
       ,result-symbol)))

(defalias 'remove-from-list 'object-remove-from-list)

(defun mpereira/hide-trailing-whitespace ()
  (interactive)
  (setq-local show-trailing-whitespace nil))

(defun mpereira/delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))

(defun mpereira/rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

(require 'thingatpt)
(require 'thingatpt+)
(defun mpereira/eval-thing-at-or-around-point ()
  "Evaluate thing at or surrounding the point."
  (interactive)
  (save-excursion
    (let* ((string-thing (tap-string-at-point))
           (symbol-thing (tap-symbol-at-point))
           (sexp-thing (sexp-at-point)))
      (cond
       (string-thing
        (let* ((_ (message "string"))
               (bounds (tap-bounds-of-string-at-point))
               (string-form (substring-no-properties string-thing))
               (string-value (substring-no-properties
                              (tap-string-contents-at-point))))
          (message "%s → %s" string-form string-form)
          (eros--eval-overlay string-value (cdr bounds))))
       (symbol-thing
        (let* ((_ (message "symbol"))
               (bounds (tap-bounds-of-symbol-at-point))
               (symbol-name (substring-no-properties
                             (tap-symbol-name-at-point)))
               (symbol-value (eval symbol-thing)))
          (message "%s" symbol-name)
          (message "↓")
          (message "%s" symbol-value)
          (eros--eval-overlay symbol-value (cdr bounds))))
       (sexp-thing
        (let* ((_ (message "sexp"))
               (bounds (tap-bounds-of-sexp-at-point))
               (value (eval sexp-thing)))
          (message "%s" sexp-thing)
          (message "↓")
          (message "%s" value)
          (eros--eval-overlay value (cdr bounds))))))))

(defun mpereira/split-window-below-and-switch ()
  "Split the window horizontally then switch to the new window."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun mpereira/split-window-right-and-switch ()
  "Split the window vertically then switch to the new window."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(defun mpereira/toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))
    (message "Can only toggle window split for 2 windows")))

(defun mpereira/indent-buffer ()
  "Indents the current buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(with-eval-after-load "lispy"
  (defun mpereira/inside-bounds-dwim ()
    ;; (when-let (lispy--bounds-dwim)
    ;;   (when (<)))
    )

  (defun mpereira/backward-sexp-begin (arg)
    "Moves to the beginning of the previous ARG nth sexp."
    (interactive "p")
    (if-let (bounds (lispyville--in-string-p))
        ;; Go to beginning of string.
        (goto-char (car bounds))
      ;; `backward-sexp' will enter list-like sexps when point is on the closing
      ;; character. So we move one character to the right.
      (when (looking-at lispy-right)
        (forward-char 1))
      (backward-sexp arg)))

  (defun mpereira/forward-sexp-begin (arg)
    "Moves to the beginning of the next ARG nth sexp. The fact that this doesn't
exist in any structured movement package is mind-boggling to me."
    (interactive "p")
    (when-let (bounds (lispyville--in-string-p))
      (goto-char (car bounds)))
    (dotimes (_ arg)
      (forward-sexp 1)
      (if (looking-at lispy-right)
          ;; Prevent moving forward from last element in current level.
          (backward-sexp 1)
        (progn
          (forward-sexp 1)
          (backward-sexp 1)))))

  ;; Idea: move up to the parent sexp, count the number of sexps inside it with
  ;; `scan-lists' or `scan-sexps' or `paredit-scan-sexps-hack' to know whether
  ;; or not we're at the last sexp.
  (defun mpereira/forward-sexp-end (arg)
    "Moves to the end of the next ARG nth sexp. The fact that this doesn't exist
in any structured movement package is mind-boggling to me."
    (interactive "p")
    (let ((region-was-active (region-active-p)))
      ;; If a region is selected, pretend it's not so that `lispy--bounds-dwim'
      ;; doesn't return the bounds of the region. We want the bounds of the
      ;; actual thing under the point.
      (cl-letf (((symbol-function 'region-active-p) #'(lambda () nil)))
        (when-let (bounds (lispy--bounds-dwim))
          (let ((end (- (cdr bounds) 1)))
            (if (< (point) end)
                ;; Move to the end of the current sexp if not already there.
                (progn
                  (goto-char end)
                  ;; When a region is active we need to move right an extra
                  ;; character.
                  (when (and region-was-active)
                    (forward-char 1)))
              (progn
                ;; Move one character to the right in case point is on a list-like
                ;; closing character so that the subsequent `lispy--bounds-dwim'
                ;; start is right.
                (when (looking-at lispy-right)
                  (forward-char 1))
                ;; Go to the beginning of the current sexp so that
                ;; `mpereira/forward-sexp-begin' works.
                (when-let (bounds (lispy--bounds-dwim))
                  (goto-char (car bounds)))
                ;; Move to the beginning of the next sexp.
                (mpereira/forward-sexp-begin arg)
                ;; Go to the end of the sexp.
                (when-let (bounds (lispy--bounds-dwim))
                  (goto-char (- (cdr bounds) 1))
                  ;; When a region is active and we're not at the last sexp we
                  ;; need to move right an extra character.
                  (when (and region-was-active
                             ;; TODO
                             ;; (not last-sexp)
                             )
                    (forward-char 1)))))))))))

(with-eval-after-load "evil"
  (with-eval-after-load "lispyville"
    (defun mpereira/insert-to-beginning-of-list (arg)
      (interactive "p")
      (lispyville-backward-up-list)
      (evil-forward-char)
      (evil-insert arg))

    (defun mpereira/append-to-end-of-list (arg)
      (interactive "p")
      (lispyville-up-list)
      (evil-insert arg))))

(defun mpereira/org-sort-parent-entries (&rest args)
  ;; `org-sort-entries' doesn't respect `save-excursion'.
  (let ((origin (point)))
    (org-up-heading-safe)
    (apply #'org-sort-entries args)
    (goto-char origin)))

(defun mpereira/org-cycle-cycle ()
  (org-cycle)
  ;; https://www.mail-archive.com/emacs-orgmode@gnu.org/msg86779.html
  (ignore-errors
    (org-cycle)))

(defun mpereira/call-interactively-with-prefix-arg (prefix-arg func)
  (let ((current-prefix-arg prefix-arg))
    (call-interactively func)))

(defun mpereira/perspective-switch (perspective-name
                                    &optional after-perspective-creation-function)
  "TODO: docstring."
  (let ((perspective (gethash perspective-name (perspectives-hash))))
    (if perspective
        ;; Perspective already exists and is not the current.
        (when (not (equal perspective (persp-curr)))
          (persp-switch perspective-name))
      ;; Perspective doesn't exist.
      (progn
        (persp-switch perspective-name)
        (and after-perspective-creation-function
             (funcall after-perspective-creation-function perspective-name))))))

(defun mpereira/counsel-projectile-perspective-switch-project (&optional default-action)
  "TODO: docstring."
  (interactive)
  (ivy-read (projectile-prepend-project-name "Switch to project: ")
            (projectile-relevant-known-projects)
            :preselect (and (projectile-project-p)
                            (abbreviate-file-name (projectile-project-root)))
            :action (lambda (project-path)
                      (let ((perspective-name (funcall
                                               projectile-project-name-function
                                               project-path)))
                        (mpereira/perspective-switch
                         perspective-name
                         (lambda (perspective-name)
                           (counsel-projectile-switch-project-action
                            project-path)))))
            :require-match t
            :sort counsel-projectile-sort-projects
            :caller 'counsel-projectile-switch-project))

(with-eval-after-load "find-file-in-project"
  (defun mpereira/find-directory ()
    (interactive)
    (ffip-find-files "" nil t)))

(with-eval-after-load "projectile"
  (defun mpereira/maybe-projectile-dired ()
    (interactive)
    (if (projectile-project-p)
        (projectile-dired)
      (dired ".")))

  (defun mpereira/maybe-projectile-ibuffer ()
    (interactive)
    (if (projectile-project-p)
        (projectile-ibuffer nil)
      (ibuffer ".")))

  (with-eval-after-load "eshell"
    (defun mpereira/maybe-projectile-eshell ()
      (interactive)
      (if (projectile-project-p)
          (projectile-run-eshell t)
        (eshell t))))

  (with-eval-after-load "find-file-in-project"
    (with-eval-after-load "counsel-projectile"
      (defun mpereira/maybe-projectile-switch-buffer ()
        (interactive)
        (if (projectile-project-p)
            (counsel-projectile-switch-to-buffer)
          (ivy-switch-buffer)))

      (defun mpereira/maybe-projectile-find-file ()
        (interactive)
        (if (projectile-project-p)
            (counsel-projectile-find-file)
          (ffip)))

      (defun mpereira/maybe-projectile-find-directory ()
        (interactive)
        (if (projectile-project-p)
            (counsel-projectile-find-dir)
          (mpereira/find-directory))))))

(defun mpereira/enable-line-numbers ()
  (setq display-line-numbers t))

(defun mpereira/disable-line-numbers ()
  (setq display-line-numbers nil))

(defun mpereira/maybe-enable-aggressive-indent-mode ()
  (when (not
         (or (cl-member-if #'derived-mode-p aggressive-indent-excluded-modes)
             buffer-read-only))
    (aggressive-indent-mode)))

(defun mpereira/lock-screen ()
  "TODO: docstring."
  (interactive)
  ;; TODO: make file path joining portable.
  (let ((command (concat "/System"
                         "/Library"
                         "/CoreServices"
                         "/Menu\\ Extras"
                         "/User.menu"
                         "/Contents"
                         "/Resources"
                         "/CGSession"
                         " "
                         "-suspend")))
    (shell-command command)))

(defun mpereira/epoch-at-point-to-timestamp ()
  "TODO: docstring"
  (interactive)
  (if-let (thing (counsel-symbol-at-point))
      (let* ((seconds (string-to-number thing))
             (time (seconds-to-time seconds))
             (timestamp (format-time-string "%Y-%m-%d %a %H:%M:%S" time)))
        (kill-new timestamp)
        (message timestamp)
        timestamp)))

(defun mpereira/pwd ()
  "TODO: docstring"
  (interactive)
  (let ((path (buffer-file-name)))
    (kill-new path)
    (message path)
    path))

(defun mpereira/make-hs-hide-level (n)
  "TODO: docstring"
  (lexical-let ((n n))
    #'(lambda ()
        (interactive)
        (save-excursion
          (goto-char (point-min))
          (hs-hide-level n)))))

(defun mpereira/bm-counsel-get-list (bookmark-overlays)
  "TODO: docstring.
Arguments: BOOKMARK-OVERLAYS."
  (-map (lambda (bm)
          (with-current-buffer (overlay-buffer bm)
            (let* ((line (replace-regexp-in-string
                          "\n$"
                          ""
                          (buffer-substring (overlay-start bm)
                                            (overlay-end bm))))
                   ;; line numbers start on 1
                   (line-num (+ 1 (count-lines (point-min) (overlay-start bm))))
                   (name (format "%s:%d - %s" (buffer-name) line-num line)))
              `(,name . ,bm))))
        bookmark-overlays))

(defun mpereira/bm-counsel-find-bookmark ()
  "TODO: docstring.
Arguments: none."
  (interactive)
  (let* ((bm-list (mpereira/bm-counsel-get-list (bm-overlays-lifo-order t)))
         (bm-hash-table (make-hash-table :test 'equal))
         (search-list (-map (lambda (bm) (car bm)) bm-list)))
    (-each bm-list (lambda (bm)
                     (puthash (car bm) (cdr bm) bm-hash-table)))
    (ivy-read "Find bookmark: "
              search-list
              :require-match t
              :keymap counsel-describe-map
              :action (lambda (chosen)
                        (let ((bookmark (gethash chosen bm-hash-table)))
                          (switch-to-buffer (overlay-buffer bookmark))
                          (bm-goto bookmark)))
              :sort t)))

(defun mpereira/narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun, whichever applies
first. Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing command. Remove this
         ;; first conditional if you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(defun mpereira/uuid ()
  "Return a UUID."
  (interactive)
  (kill-new (format "%04x%04x-%04x-%04x-%04x-%06x%06x"
                    (random (expt 16 4))
                    (random (expt 16 4))
                    (random (expt 16 4))
                    (random (expt 16 4))
                    (random (expt 16 4))
                    (random (expt 16 6))
                    (random (expt 16 6)))))

;; TODO: make this better.
(defun mpereira/kill-last-kbd-macro ()
  "Save last executed macro definition in the kill ring."
  (let ((name (gensym "kill-last-kbd-macro-")))
    (name-last-kbd-macro name)
    (with-temp-buffer
      (insert-kbd-macro name)
      (kill-new (buffer-substring-no-properties (point-min) (point-max))))))

(defun mpereira/load-theme (theme)
  "TODO: docstring. THEME."
  (interactive)
  (counsel-load-theme-action (symbol-name theme))
  (when org-bullets-mode
    (org-bullets-mode -1)
    (org-bullets-mode 1)))

(defun mpereira/load-light-theme ()
  "TODO: docstring."
  (interactive)
  (mpereira/load-theme mpereira/light-theme))

(defun mpereira/load-dark-theme ()
  "TODO: docstring."
  (interactive)
  (mpereira/load-theme mpereira/dark-theme))

(defun mpereira/ps ()
  "Show list of system processes.
Copies the selected process's PID to the clipboard."
  (interactive)
  (let ((ps (split-string (shell-command-to-string
                           "ps axco user,pid,%cpu,%mem,start,time,command -r")
                          "\n"
                          t)))
    (ivy-read "Process: "
              ps
              :action (lambda (project-path)
                        (kill-new (cadr (split-string project-path " " t)))))))

(defun mpereira/kill-buffer-and-maybe-window ()
  "TODO."
  (interactive)
  (if (window-prev-buffers)
      (let ((previous-buffer (car (window-prev-buffers))) ; not using this.
            (current-buffer* (current-buffer)))
        (kill-buffer current-buffer*))
    (kill-buffer-and-window)))

(with-eval-after-load "counsel"
  (with-eval-after-load "lispy"
    ;; `lispy-goto-local' doesn't work in org babel indirect src block buffers.
    (defun mpereira/lispy-goto-local (&optional args)
      "lispy-goto-local with fallback to counsel-imenu."
      (interactive)
      (if (lispy--file-list)
          (funcall 'lispy-goto-local args)
        (funcall 'counsel-imenu)))))

;; TODO: make it be able to get indirect buffer file names.
(defun mpereira/file-metadata ()
  "TODO."
  (interactive)
  (let* ((fname (buffer-file-name))
         (data (file-attributes fname))
         (access (current-time-string (nth 4 data)))
         (mod (current-time-string (nth 5 data)))
         (change (current-time-string (nth 6 data)))
         (size (nth 7 data))
         (mode (nth 8 data))
         (output (format
                  "%s:

Accessed: %s
Modified: %s
Changed:  %s
Size:     %s bytes
Mode:     %s"
                  fname access mod change size mode)))
    (kill-new output)
    (message output)
    output))

(defun mpereira/unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

(defun mpereira/buffer-project-directory (project-root-directory
                                          buffer-directory
                                          &optional max-length)
  "Returns a possibly left-truncated relative directory for a project buffer."
  (let* ((truncation-string (if (char-displayable-p ?…) "…/" ".../"))
         (relative-directory (s-chop-prefix project-root-directory buffer-directory))
         (abbreviated-directory (abbreviate-file-name relative-directory))
         (max-length (or max-length 1.0e+INF)))
    ;; If it fits, return the string.
    (if (and max-length
             (<= (string-width abbreviated-directory) max-length))
        abbreviated-directory
      ;; If it doesn't, shorten it.
      (let ((path (reverse (split-string abbreviated-directory "/")))
            (output ""))
        (when (and path (equal "" (car path)))
          (setq path (cdr path)))
        (let ((max (- max-length (string-width truncation-string))))
          ;; Concat as many levels as possible, leaving 4 chars for safety.
          (while (and path (<= (string-width (concat (car path) "/" output))
                               max))
            (setq output (concat (car path) "/" output))
            (setq path (cdr path))))
        ;; If we had to shorten, prepend …/.
        (when path
          (setq output (concat truncation-string output)))
        output))))

(defun mpereira/short-directory-path (directory &optional max-length)
  "Returns a potentially trimmed-down version of the directory DIRECTORY,
replacing parent directories with their initial characters to try to get the
character length of directory (sans directory slashes) down to MAX-LENGTH."
  (let* ((components (split-string (abbreviate-file-name directory) "/"))
         (max-length (or max-length 1.0e+INF))
         (len (+ (1- (length components))
                 (cl-reduce '+ components :key 'length)))
         (str ""))
    (while (and (> len max-length)
                (cdr components))
      (setq str (concat str
                        (cond ((= 0 (length (car components))) "/")
                              ((= 1 (length (car components)))
                               (concat (car components) "/"))
                              (t
                               (if (string= "."
                                            (string (elt (car components) 0)))
                                   (concat (substring (car components) 0 2)
                                           "/")
                                 (string (elt (car components) 0) ?/)))))
            len (- len (1- (length (car components))))
            components (cdr components)))
    (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

(defun mpereira/elpy-shell-clear-shell ()
  "Clear the current shell buffer."
  (interactive)
  (with-current-buffer (process-buffer (elpy-shell-get-or-create-process))
    (comint-clear-buffer)))

(defun mpereira/prevent-buffer-kill ()
  "Prevents the current buffer from being killed."
  (interactive)
  (emacs-lock-mode 'kill))

(defun mpereira/exec-path-from-shell-initialize ()
  "Clears PATH before running `exec-path-from-shell-initialize' so that there's
no duplicate or conflicting entries."
  (interactive)
  (setenv "PATH" "")
  (exec-path-from-shell-initialize))

(defun mpereira/org-todo-with-date (&optional arg)
  (interactive "P")
  (cl-letf* ((org-read-date-prefer-future nil)
             (my-current-time (org-read-date t t nil "when:" nil nil nil))
             ((symbol-function #'org-current-effective-time)
              #'(lambda () my-current-time)))
    (org-todo arg)))
#+end_src

* Toggle buffer maximize
#+begin_src emacs-lisp :tangle yes
(defvar mpereira/toggle-buffer-maximize-window-configuration nil
  "A window configuration to return to when unmaximizing the buffer.")

(defvar mpereira/toggle-buffer-maximize-point nil
  "A point to return to when unmaximizing the buffer.")

(defvar mpereira/toggle-buffer-maximize-centered-p nil
  "Whether or not the buffer was maximixed in centered mode.")

(defun mpereira/toggle-buffer-maximize (&optional centered-p)
  "Saves the current window configuration and makes the current buffer occupy
the whole window. Calling it a second time will restore the saved window
configuration."
  (interactive)
  (if (bound-and-true-p mpereira/toggle-buffer-maximize-window-configuration)
      (progn
        (set-window-configuration mpereira/toggle-buffer-maximize-window-configuration)
        (setq mpereira/toggle-buffer-maximize-window-configuration nil)
        (goto-char mpereira/toggle-buffer-maximize-point)
        (setq mpereira/toggle-buffer-maximize-point nil)
        (when mpereira/toggle-buffer-maximize-centered-p
          (call-interactively 'olivetti-mode)
          (setq mpereira/toggle-buffer-maximize-centered-p nil)))
    (progn
      (setq mpereira/toggle-buffer-maximize-window-configuration
            (current-window-configuration))
      (setq mpereira/toggle-buffer-maximize-point (point))
      (setq mpereira/toggle-buffer-maximize-centered-p centered-p)
      (delete-other-windows)
      (when centered-p
        (call-interactively 'olivetti-mode)))))
#+end_src

* Reload directory local variables when saving .dir-locals.el files
Taken from [[https://emacs.stackexchange.com/a/13096][Stack Overflow]].

#+begin_src emacs-lisp :tangle yes
(defun mpereira/reload-dir-locals-for-current-buffer ()
  "Reload directory local variables on the current buffer."
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun mpereira/reload-dir-locals-for-all-buffer-in-this-directory ()
  "Reload directory local variables on every buffer with the same
`default-directory' as the current buffer."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (mpereira/reload-dir-locals-for-current-buffer)))))

(defun mpereira/enable-autoreload-for-dir-locals ()
  (when (and (buffer-file-name)
             (equal dir-locals-file
                    (file-name-nondirectory (buffer-file-name))))
    (add-hook (make-variable-buffer-local 'after-save-hook)
              'mpereira/reload-dir-locals-for-all-buffer-in-this-directory)))

(add-hook 'emacs-lisp-mode-hook #'mpereira/enable-autoreload-for-dir-locals)
#+end_src

* Asynchronous =undo-tree= history save
I found that ~undo-tree-save-history-from-hook~, which =undo-tree= calls via the
~write-file-functions~ hook (called on every file save), took 1-2 seconds on any
non-trivial org mode buffers. This was a special nuisance when making small
changes in small indirect buffers.

The following replaces ~undo-tree-save-history-from-hook~ with an asynchronous
version.

#+begin_src emacs-lisp :tangle yes
(defun mpereira/undo-tree-async-save-history ()
  "TODO: docstring."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (async-start
     `(lambda ()
        ,(async-inject-variables "\\`load-path\\'")
        (with-output-to-string
          (require 'undo-tree)
          (find-file ,file-name)
          (undo-tree-save-history-from-hook)))
     `(lambda (output)
        (let ((inhibit-message t))
          (message (format "undo-tree history saved asynchronously for %s%s"
                           ,file-name
                           (if (string= "" output)
                               ""
                             (format ": %s" output)))))))
    ;; Hooks added to `write-file-functions' need to return non-nil so that the
    ;; file is written.
    nil))

(with-eval-after-load "undo-tree"
  (remove-hook 'write-file-functions #'undo-tree-save-history-from-hook)
  (add-hook 'write-file-functions #'mpereira/undo-tree-async-save-history))
#+end_src

* Asynchronous Org Babel tangle, Org TOC generation and byte recompilation
I have a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][file-local]] ~before-save-hook~ set at the end of the file for this.

#+begin_src org
# Local Variables:
# before-save-hook: mpereira/configuration-org-tangle-generate-toc-and-byte-compile
# End:
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq mpereira/configuration-org-file-name (expand-file-name "configuration.org" user-emacs-directory) )
(setq mpereira/configuration-el-file-name (expand-file-name "configuration.el" user-emacs-directory) )

(defun mpereira/configuration-org-tangle-generate-toc-and-byte-compile ()
  "TODO: docstring."
  (interactive)
  (let ((configuration-org-file-name mpereira/configuration-org-file-name)
        (configuration-el-file-name mpereira/configuration-el-file-name)
        (org-babel-initialize 'mpereira/org-babel-initialize))
    (async-start
     `(lambda ()
        ,(async-inject-variables "\\`load-path\\'")

        (defalias 'org-babel-initialize
          ,(symbol-function org-babel-initialize))

        (with-output-to-string
          (require 'org)
          (require 'ob-tangle)
          (require 'org-make-toc)
          (org-babel-initialize)
          (find-file ,configuration-org-file-name)
          ;; Prevent `org-make-toc' from trigering "reload file from disk?"
          ;; prompt.
          (auto-revert-mode -1)
          ;; Generating the TOC before tangling because it seems that it doesn't
          ;; run after tangling.
          (org-make-toc)
          (org-babel-tangle)))
     `(lambda (result)
        (let ((inhibit-message t))
          ;; Don't pop up the *Compile-Log* buffer.
          (setq byte-compile-warnings nil)
          (byte-compile-file ,configuration-el-file-name)
          (message (format (concat "`org-babel-tangle' and `org-make-toc' called "
                                   "asynchronously for %s. "
                                   "%s was also byte-compiled%s")
                           ,configuration-org-file-name
                           ,configuration-el-file-name
                           (if (string= "" result)
                               ""

                             (format ". output: %s" result)))))))))
#+end_src

* Tramp
#+begin_src emacs-lisp :tangle yes
(require 'tramp)
#+end_src

;; Disable version control on tramp buffers to avoid freezes.
#+begin_src emacs-lisp :tangle yes
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
#+end_src

Don't clean up recentf tramp buffers.
#+begin_src emacs-lisp :tangle yes
(setq recentf-auto-cleanup 'never)
#+end_src

[[https://github.com/syl20bnr/spacemacs/issues/11381#issuecomment-481239700][Make Emacs not crazy slow under TRAMP]].
#+begin_src emacs-lisp :tangle yes
(defadvice projectile-project-root (around ignore-remote first activate)
  (unless (file-remote-p default-directory) ad-do-it))
#+end_src

This is supposedly [[https://www.emacswiki.org/emacs/TrampMode][faster than the default]], =scp=.
#+begin_src emacs-lisp :tangle yes
(setq tramp-default-method "ssh")
#+end_src

Store TRAMP auto-save files locally.
#+begin_src emacs-lisp :tangle yes
(setq tramp-auto-save-directory
      (expand-file-name "tramp-auto-save" user-emacs-directory))
#+end_src

A more representative name for this file.
#+begin_src emacs-lisp :tangle yes
(setq tramp-persistency-file-name
      (expand-file-name "tramp-connection-history" user-emacs-directory))
#+end_src

Cache SSH passwords during the whole Emacs session.
#+begin_src emacs-lisp :tangle yes
(setq password-cache-expiry nil)
#+end_src

Reuse SSH connections. Taken from the [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html][TRAMP FAQ]].
#+begin_src emacs-lisp :tangle yes
(customize-set-variable 'tramp-ssh-controlmaster-options
                        (concat
                         "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                         "-o ControlMaster=auto -o ControlPersist=yes"))
#+end_src

** counsel-tramp
#+begin_src emacs-lisp :tangle yes
(use-package counsel-tramp)
#+end_src

* Server
#+begin_src emacs-lisp :tangle yes
(require 'server)

(unless (server-running-p)
  (server-start))
#+end_src

* Options
#+begin_src emacs-lisp :tangle yes
;; Don't append customizations to init.el.
(setq custom-file mpereira/custom-file)
(load custom-file 'noerror)

(setq confirm-kill-emacs 'y-or-n-p)

;; Automatically scroll compilation buffers to the bottom.
(setq compilation-scroll-output t)

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(blink-cursor-mode -1)

;; Don't show UI-based dialogs from mouse events.
(setq use-dialog-box nil)

;; Save session state.
;; (desktop-save-mode 1)
;; (setq desktop-restore-frames nil)
;;
;; (defun mpereira/save-desktop ()
;;   "Write the desktop save file to ~/.emacs.d."
;;   (desktop-save user-emacs-directory))
;;
;; (if (not (boundp 'mpereira/save-desktop-timer))
;;     (setq mpereira/save-desktop-timer
;;           (run-with-idle-timer 600 t 'mpereira/save-desktop)))

;; Show CRLF characters.
;; http://pragmaticemacs.com/emacs/dealing-with-dos-line-endings/
(setq inhibit-eol-conversion t)

;; Set default font size to 18.
;; FIXME: This needs to be updated when the font size changes.
(set-face-attribute 'default nil :family "Consolas" :height 180)

(eval-after-load "ivy-posframe"
  (setq ivy-posframe-font "Consolas-22"))

;; Enable narrowing commands.
(put 'narrow-to-region 'disabled nil)

;; Start in full-screen.
(add-hook 'after-init-hook #'toggle-frame-fullscreen)

;; Show matching parens.
(setq show-paren-delay 0)
(show-paren-mode 1)

;; Disable eldoc.
(global-eldoc-mode -1)

;; Break lines automatically in "text" buffers.
(add-hook 'text-mode-hook 'auto-fill-mode)

;; Highlight current line.
(global-hl-line-mode t)

;; Provide undo/redo commands for window changes.
(winner-mode t)

;; Don't create backup~ files.
(setq make-backup-files nil)

;; Don't create #autosave# files.
(setq auto-save-default nil)

;; Don't lock files.
(setq create-lockfiles nil)

;; Shh...
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
(setq ring-bell-function 'ignore)

;; Minimal titlebar for macOS.
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)

;; Make Finder's "Open with Emacs" create a buffer in the existing Emacs frame.
(setq ns-pop-up-frames nil)

;; macOS modifiers.
(setq mac-command-modifier 'meta)
;; Setting "Option" to nil allows me to type umlauts with "Option+u".
(setq mac-option-modifier nil)
(setq mac-control-modifier 'control)
(setq ns-function-modifier 'hyper)

;; Make cursor the width of the character it is under e.g. full width of a TAB.
(setq x-stretch-cursor t)

;; By default Emacs thinks a sentence is a full-stop followed by 2 spaces. Make
;; it a full-stop and 1 space.
(setq sentence-end-double-space nil)

(fset 'yes-or-no-p 'y-or-n-p)

;; Switch to help buffer when it's opened.
(setq help-window-select t)

;; Don't recenter buffer point when point goes outside window. This prevents
;; centering the buffer when scrolling down its last line.
(setq scroll-conservatively 100)

;; Keep cursor position when scrolling.
(setq scroll-preserve-screen-position 1)

(dolist (hook '(prog-mode-hook text-mode-hook))
  (add-hook hook #'mpereira/enable-line-numbers))

;; Better unique buffer names for files with the same base name.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; Remember point position between sessions.
(require 'saveplace)
(save-place-mode t)

;; Save a bunch of session state stuff.
(require 'savehist)
(setq savehist-additional-variables '(regexp-search-ring)
      savehist-autosave-interval 60
      savehist-file (expand-file-name "savehist" user-emacs-directory))
(savehist-mode t)

;; `setq', `setq-default' and `setq-local' don't seem to work with symbol
;; variables, hence the absence of a `dolist' here.
(setq-default whitespace-line-column mpereira/fill-column
              fill-column mpereira/fill-column
              comment-column mpereira/fill-column)

(setq emacs-lisp-docstring-fill-column 'fill-column)

;; UTF8 stuff.
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; Tab first tries to indent the current line, and if the line was already
;; indented, then try to complete the thing at point.
(setq tab-always-indent 'complete)

;; Make it impossible to insert tabs.
(setq-default indent-tabs-mode nil)

;; Make TABs be displayed with a width of 2.
(setq-default tab-width 2)

;; Week start on monday.
(setq calendar-week-start-day 1)

(setq select-enable-clipboard t
      select-enable-primary t
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory "file-backups"))))

;; Delete trailing whitespace on save.
(add-hook 'before-save-hook #'delete-trailing-whitespace)

(setq display-time-world-list '(("Europe/Berlin" "Hamburg")
                                ("America/Sao_Paulo" "São Paulo")
                                ("America/Los_Angeles" "San Francisco")))
#+end_src

* Performance
** Increase the amount of data read from processes
https://emacs-lsp.github.io/lsp-mode/page/performance/
#+begin_src emacs-lisp :tangle yes
(setq read-process-output-max (* 1024 1024)) ; 1mb.
#+end_src

** Make cursor movement an order of magnitude faster
From:
https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
#+begin_src emacs-lisp :tangle yes
(setq auto-window-vscroll nil)
#+end_src

https://www.reddit.com/r/emacs/comments/gaub11/poor_scrolling_performance_in_doom_emacs/fp392eh/
#+begin_src emacs-lisp :tangle yes
(setq fast-but-imprecise-scrolling 't)
(setq jit-lock-defer-time 0)
#+end_src

** Start-up profiler: esup
#+begin_src emacs-lisp :tangle yes
(use-package esup
  :pin melpa
  :commands (esup))
#+end_src

** explain-pause-mode
#+begin_src emacs-lisp :tangle yes
(use-package explain-pause-mode
  :ensure nil
  :quelpa (explain-pause-mode
           :fetcher github
           :repo "lastquestion/explain-pause-mode")
  :init
  (setq explain-pause-alert-via-message nil)
  :config
  ;; Override to use `profiler-report-profile-other-window'.
  (defun explain--profile-report-click-profile (button)
    "Click-handler when profile BUTTON is clicked in event profile report view."
    (let ((profile (button-get button 'profile)))
      (profiler-report-profile profile)))

  (explain-pause-mode 1))
#+end_src

* Color theme
Sources:
- https://emacsthemes.com
- http://daylerees.github.io/
- http://raebear.net/comp/emacscolors.html

My favorite Dark themes:
1. =modus-vivendi=
2. =doom-one=
3. =chocolate=
4. =doom-molokai=
5. =monokai=
6. =material=
7. =nimbus=
8. =doom-Ioskvem=
9. =doom-dracula=
10. =srcery=

My favorite light themes:
1. =modus-operandi=
2. =doom-one-light=
3. =doom-acario-light=
4. =github=
5. =material-light=
6. =twilight-bright=
7. =espresso=

#+begin_src emacs-lisp :tangle yes
(setq custom-safe-themes t) ;; Don't ask whether custom themes are safe.

(use-package material-theme :defer t)
(use-package monokai-theme :defer t)
(use-package github-theme :defer t)
(use-package srcery-theme :defer t)
(use-package nimbus-theme :defer t)
(use-package espresso-theme :defer t)
(use-package twilight-bright-theme :defer t)
(use-package doom-themes
  :defer t
  :config
  (doom-themes-org-config))
(use-package modus-operandi-theme
  :ensure nil
  :defer t
  :quelpa (modus-themes
           :fetcher gitlab
           :repo "protesilaos/modus-themes"))
(use-package modus-vivendi-theme
  :ensure nil
  :defer t
  :quelpa (modus-themes
           :fetcher gitlab
           :repo "protesilaos/modus-themes"))
(use-package tron-legacy-theme
  :ensure nil
  :defer t
  :quelpa (tron-legacy-theme
           :fetcher github
           :repo "ianpan870102/tron-legacy-emacs-theme"))
(use-package chocolate-theme
  :ensure nil
  :defer t
  :quelpa (chocolate-theme
           :fetcher github
           :repo "SavchenkoValeriy/emacs-chocolate-theme"))

(add-hook 'after-init-hook
          (lambda ()
            (mpereira/load-theme mpereira/initial-theme))
          t)
#+end_src

** Create hook for theme change

#+begin_src emacs-lisp :tangle yes
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")

(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

** Change themes when changing MacOS light or dark appearance
This doesn't seem to be working.

#+begin_src emacs-lisp :tangle yes
(add-hook 'ns-system-appearance-change-functions
          (lambda (appearance)
            (pcase appearance
              ('light (mpereira/load-light-theme))
              ('dark (mpereira/load-dark-theme)))))
#+end_src

* Configure Mode Line
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load "projectile"
  (with-eval-after-load "eshell"
    (with-eval-after-load "magit"
      (defconst mpereira/mode-line-projectile
        '(:eval
          (let ((face 'bold))
            (when (projectile-project-name)
              (concat
               (propertize " " 'face face)
               (propertize (format "%s" (projectile-project-name)) 'face face)
               (propertize " " 'face face))))))

      (defconst mpereira/mode-line-vc
        '(:eval
          (when (and (stringp vc-mode) (string-match "Git[:-]" vc-mode))
            (let* ((branch (replace-regexp-in-string "^ Git[:-]" "" vc-mode))
                   (truncated-branch (s-truncate 20 branch "…"))
                   (face 'magit-mode-line-process))
              (concat
               (propertize " " 'face face)
               (propertize (format "%s" truncated-branch) 'face face)
               (propertize " " 'face face))))))

      (defconst mpereira/mode-line-buffer
        '(:eval
          (let ((modified-or-ro-symbol (cond
                                        ((and buffer-file-name
                                              (buffer-modified-p))
                                         "~")
                                        (buffer-read-only ":RO")
                                        (t "")))
                ;; Not using %b because it sometimes prepends the directory
                ;; name.
                (buffer-name* (file-name-nondirectory (buffer-name)))
                (directory-face 'italic)
                (buffer-name-face 'bold)
                (modified-or-ro-symbol-face 'font-lock-comment-face)
                (directory (if (and buffer-file-name
                                    (projectile-project-p))
                               (mpereira/short-directory-path
                                (mpereira/buffer-project-directory
                                 (projectile-project-root)
                                 default-directory)
                                mpereira/mode-line-max-directory-length)
                             "")))
            (concat
             (propertize " " 'face buffer-name-face)
             (propertize (format "%s" directory) 'face directory-face)
             (propertize (format "%s" buffer-name*) 'face buffer-name-face)
             (propertize modified-or-ro-symbol 'face modified-or-ro-symbol-face)
             (propertize " " 'face buffer-name-face)))))

      (defconst mpereira/mode-line-major-mode
        '(:eval
          (propertize " %m  " 'face 'font-lock-comment-face)))

      (defconst mpereira/mode-line-buffer-position
        '(:eval
          (unless eshell-mode
            (propertize " %p %l,%c " 'face 'font-lock-comment-face))))

      (defun mpereira/flycheck-lighter (state)
        "Return flycheck information for the given error type STATE.

Source: https://git.io/vQKzv"
        (let* ((counts (flycheck-count-errors flycheck-current-errors))
               (errorp (flycheck-has-current-errors-p state))
               (err (or (cdr (assq state counts)) "?"))
               (running (eq 'running flycheck-last-status-change)))
          (if errorp (format "•%s" err))))

      (defconst mpereira/flycheck
        '(:eval
          (when (and (bound-and-true-p flycheck-mode)
                     (or flycheck-current-errors
                         (eq 'running flycheck-last-status-change)))
            (concat
             (cl-loop for state in '((error . "#FB4933")
                                     (warning . "#FABD2F")
                                     (info . "#83A598"))
                      as lighter = (mpereira/flycheck-lighter (car state))
                      when lighter
                      concat (propertize lighter 'face `(:foreground
                                                         ,(cdr state))))
             " "))))

      (setq-default mode-line-format (list mpereira/mode-line-projectile
                                           mpereira/mode-line-vc
                                           mpereira/mode-line-buffer
                                           mpereira/flycheck
                                           mpereira/mode-line-major-mode
                                           mpereira/mode-line-buffer-position
                                           mode-line-misc-info
                                           mode-line-end-spaces))

      (defun mpereira/set-mode-line-padding ()
        (dolist (face '(mode-line mode-line-inactive))
          (let ((background (face-attribute face :background)))
            (set-face-attribute face nil :box `(:line-width 5
                                                :color ,background)))))

      (mpereira/set-mode-line-padding)

      ;; Set modeline padding after running `counsel-load-theme'.
      (advice-add 'counsel-load-theme-action
                  :after
                  (lambda (&rest _)
                    (mpereira/set-mode-line-padding))))))
#+end_src

* Configure Header Line
#+begin_src emacs-lisp :tangle yes
(defun mpereira/set-header-line-format ()
  (interactive)
  (setq header-line-format '((which-function-mode ("" which-func-format " ")))))

(defun mpereira/clear-header-line-format ()
  (interactive)
  (setq header-line-format nil))

(setq which-func-unknown "…")

;; TODO: do I want this?
;; (add-hook 'prog-mode-hook #'which-function-mode)
;; (add-hook 'prog-mode-hook #'mpereira/set-header-line-format)
#+end_src

* Vi emulation
** evil
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :general
  (:keymaps '(evil-motion-state-map)
   ";" #'evil-ex
   ":" #'evil-command-window-ex)

  :init
  ;; Setup for `evil-collection'.
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)

  (setq-default evil-symbol-word-search t)
  (setq-default evil-shift-width 2)
  (setq evil-jumps-cross-buffers nil)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-want-C-u-scroll t)
  (setq evil-search-module 'evil-search)

  ;; Prevent the cursor from moving beyond the end of line.
  (setq evil-move-cursor-back t)
  (setq evil-move-beyond-eol nil)

  :config
  (evil-mode t)

  ;; Make `v$' not include the newline character.
  ;; Resources:
  ;; - https://github.com/emacs-evil/evil/issues/897
  ;; - `evil-end-of-line-or-visual-line'
  ;; - `evil-end-of-line'
  ;; - `end-of-visual-line'
  (general-define-key
   :states '(motion)
   "$" '(lambda ()
          (interactive)
          (evil-end-of-line)))

  (general-define-key
   :keymaps '(evil-ex-search-keymap minibuffer-local-map)
   "C-k" #'previous-line-or-history-element
   "C-j" #'next-line-or-history-element)

  (evil-ex-define-cmd "bdelete" #'kill-this-buffer)

  ;; Don't create a kill entry on every visual movement.
  ;; More details: https://emacs.stackexchange.com/a/15054:
  (fset 'evil-visual-update-x-selection 'ignore))
#+end_src

** evil-org
#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :after evil org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(operators
                                        navigation
                                        textobjects))
              ;; Make `v$' not include the newline character.
              ;; Resources:
              ;; - https://github.com/emacs-evil/evil/issues/897
              ;; - `evil-end-of-line-or-visual-line'
              ;; - `evil-end-of-line'
              ;; - `end-of-visual-line'
              ;;
              ;; This needs to run right after `evil-org-mode' is loaded and
              ;; `evil-org-set-key-theme' is run.
              (general-define-key
               :keymaps '(evil-org-mode-map)
               :states '(motion)
               "$" '(lambda ()
                      (interactive)
                      (evil-end-of-line))))))
#+end_src

** evil-magit
#+begin_src emacs-lisp :tangle yes
(use-package evil-magit
  :after evil magit
  :init
  ;; FIXME: disabled this in an effort to see if "zz" works again in magit
  ;; buffers.
  (setq evil-magit-use-z-for-folds nil)
  :config
  (general-define-key
   :keymaps 'magit-mode-map
   :states '(normal visual)
   "j" 'evil-next-visual-line
   "k" 'evil-previous-visual-line
   "C-j" 'magit-section-forward
   "C-k" 'magit-section-backward)

  (general-define-key
   :keymaps '(git-rebase-mode-map)
   :states '(normal)
   "x" 'git-rebase-kill-line
   "C-S-j" 'git-rebase-move-line-down
   "C-S-k" 'git-rebase-move-line-up))
#+end_src

** evil-extra-operator
REVIEW: disabled on [2020-05-28 Thu] because I don't use it and it was clashing
with another keybinding.
#+begin_src emacs-lisp :tangle yes
(use-package evil-extra-operator
  :disabled
  :after evil
  :init
  (setq evil-extra-operator-eval-key "ge")
  :config
  (add-hook 'prog-mode-hook 'evil-extra-operator-mode))
#+end_src

** evil-exchange
#+begin_src emacs-lisp :tangle yes
(use-package evil-exchange
  :after evil
  :config
  (evil-exchange-install))
#+end_src

** evil-nerd-commenter
#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :after evil
  :config
  (general-define-key
   :keymaps '(normal)
   "gc" 'evilnc-comment-operator))
#+end_src

** evil-surround
#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode t))
#+end_src

** evil-matchit
#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :after evil
  :config
  (global-evil-matchit-mode 1))
#+end_src

** evil-lion
#+begin_src emacs-lisp :tangle yes
(use-package evil-lion
  :after evil
  :config
  (evil-lion-mode))
#+end_src

** evil-string-inflection
#+begin_src emacs-lisp :tangle yes
(use-package evil-string-inflection
  :after evil
  :config
  ;; FIXME: doesn't come back to kebab case when cycling from a region.
  ;; Check out https://github.com/strickinato/evil-briefcase.
  (general-define-key
   :states '(normal)
   "g-" #'evil-operator-string-inflection))
#+end_src

** evil-goggles
#+begin_src emacs-lisp :tangle yes
(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-mode)

  ;; Optionally use diff-mode's faces; as a result, deleted text will be
  ;; highlighed with `diff-removed` face which is typically some red color
  ;; (as defined by the color theme) other faces such as `diff-added` will
  ;; be used for other actions.
  (evil-goggles-use-diff-faces))
#+end_src

** evil-multiedit
#+begin_src emacs-lisp :tangle yes
(use-package evil-multiedit
  :after evil
  :config
  (setq evil-multiedit-follow-matches t)

  (general-define-key
   :states '(normal)
   "C-RET" 'evil-multiedit-toggle-marker-here
   "RET" 'evil-multiedit-toggle-or-restrict-region
   "C-k" 'evil-multiedit-prev
   "C-j" 'evil-multiedit-next
   "C-n" 'evil-multiedit-match-and-next
   "C-p" 'evil-multiedit-match-and-prev
   "C-S-n" 'evil-multiedit-match-all)

  (general-define-key
   :states '(visual)
   "C-RET" 'evil-multiedit-toggle-marker-here
   "C-k" 'evil-multiedit-prev
   "C-j" 'evil-multiedit-next
   "C-n" 'evil-multiedit-match-symbol-and-next
   "C-p" 'evil-multiedit-match-symbol-and-prev
   "C-S-n" 'evil-multiedit-match-all)

  (general-define-key
   :keymaps '(evil-multiedit-state-map)
   "RET" 'evil-multiedit-toggle-or-restrict-region
   "C-n" 'evil-multiedit-match-symbol-and-next
   "C-p" 'evil-multiedit-match-symbol-and-prev
   "C-k" 'evil-multiedit-prev
   "C-j" 'evil-multiedit-next))
#+end_src

** evil-owl
~evil-owl-extra-posframe-args~ is set so that the evil-owl frame looks exactly
the same as the =ivy-posframe= one.

#+begin_src emacs-lisp :tangle yes
(use-package evil-owl
  :after (evil ivy-posframe)
  :config
  (setq evil-owl-max-string-length 50)
  (setq evil-owl-display-method 'posframe)

  (defun mpereira/update-evil-owl-posframe-args ()
    (interactive)
    (setq evil-owl-extra-posframe-args
          `(:width 80
            :height 20
            :background-color ,(face-attribute 'ivy-posframe :background nil t)
            :foreground-color ,(face-attribute 'ivy-posframe :foreground nil t)
            :internal-border-width ,ivy-posframe-border-width
            :internal-border-color ,(face-attribute 'ivy-posframe-border
                                                    :background
                                                    nil
                                                    t))))

  (add-hook 'after-init-hook 'mpereira/update-evil-owl-posframe-args)
  (add-hook 'after-load-theme-hook 'mpereira/update-evil-owl-posframe-args)

  (evil-owl-mode))
#+end_src

** evil-collection
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)

  ;; FIXME: https://github.com/emacs-evil/evil-collection/pull/253.
  ;; (evil-collection-define-key 'normal 'tablist-mode-map
  ;;   (kbd "RET") 'tablist-find-entry
  ;;   "d" 'tablist-flag-forward
  ;;   "f" 'tablist-find-entry
  ;;   "D" 'tablist-do-delete
  ;;   "C" 'tablist-do-copy
  ;;   "R" 'tablist-do-rename
  ;;   "x" 'tablist-do-flagged-delete)

  ;; (evil-collection-define-key 'normal 'tablist-minor-mode-map
  ;;   "<"  'tablist-shrink-column
  ;;   ">"  'tablist-enlarge-column
  ;;   "\t" 'tablist-forward-column
  ;;   "g%" tablist-mode-regexp-map
  ;;   "g*" tablist-mode-mark-map
  ;;   "g/" tablist-mode-filter-map
  ;;   "gr" 'tablist-revert
  ;;   ;; "k"  'tablist-do-kill-lines
  ;;   "k"  nil
  ;;   "m"  'tablist-mark-forward
  ;;   "m"  'tablist-mark-forward
  ;;   "q"  'tablist-quit
  ;;   "s"  'tablist-sort
  ;;   "t"  'tablist-toggle-marks
  ;;   "U"  'tablist-unmark-all-marks
  ;;   "u"  'tablist-unmark-forward
  ;;   (kbd "TAB") 'tablist-forward-column
  ;;   [backtab] 'tablist-backward-column)
  )
#+end_src

* Org
** org-mode
#+begin_src emacs-lisp :tangle yes
(setq org-directory (expand-file-name "org" mpereira/dropbox-directory))

(setq org-modules '(org-habit
                    org-info
                    org-protocol
                    org-tempo))
;; Requiring these modules because org mode only does that for `org-modules'
;; defined prior to loading it.
(require 'org-habit)
(require 'org-protocol)
(require 'org-tempo)

;; Pretty ellipsis.
(setq org-ellipsis "…")

(setq org-log-done 'time)

;; When this is set to `nil':
;; - `org-insert-heading' will insert a heading *before* the current heading.
;; - `org-insert-heading-after-current' will insert a heading *after* the
;;   current heading.
(setq org-insert-heading-respect-content nil)

;; TODO: is this needed?
(setq org-catch-invisible-edits 'show)

;; Show empty line between collapsed trees if they are separated by just 1
;; line break.
(setq org-cycle-separator-lines 1)

(setq org-attach-auto-tag "attachment")

(add-hook 'org-mode-hook #'mpereira/disable-line-numbers)

(setq org-tags-column -80)

;; TODO: improve this?
(face-spec-set 'org-tag '((t :box (:color "gray30" :line-width 1))))

;; Don't indent src block content.
(setq org-edit-src-content-indentation 0)

;; Don't close all other windows when exiting the src buffer.
(setq org-src-window-setup 'current-window)

;; Open indirect buffer in the same window as the src buffer.
(setq org-indirect-buffer-display 'current-window)

;; Fontify code in code blocks.
(setq org-src-fontify-natively t)

;; Make TAB act as if it were issued in a buffer of the language’s major mode.
(setq org-src-tab-acts-natively t)

(setq org-todo-keywords '((sequence "TODO(t!)"
                                    "DOING(d!)"
                                    "WAITING(w@/!)"
                                    "|"
                                    "SOMEDAY(s@/!)"
                                    "CANCELLED(c@/!)"
                                    "DONE(D!)")))

(setq org-capture-templates
      '(("t" "Inbox" entry
         (file "inbox.org")
         "* TODO %i%?")
        ("c" "Calendar" entry
         (file mpereira/org-calendar-file)
         "* %i%?\n  :PROPERTIES:\n  :calendar-id: %(caar mpereira/secret-org-gcal-file-alist)\n  :END:\n:org-gcal:\n%^{When?}t\n:END:")
        ("a" "Appointment" entry
         (file "appointments.org")
         "* %i%?\n  %^{When?}t")
        ("j" "Journal for today" entry
         (file+olp+datetree "journal.org" "Journal")
         "* %U %^{Title}\n  %?"
         :tree-type week
         :empty-lines-after 1)
        ("J" "Journal for some other day" entry
         (file+olp+datetree "journal.org" "Journal")
         "* %(format-time-string \"[%Y-%m-%d \\%a %H:%M]\") %^{Title}\n  %?"
         :tree-type week
         :time-prompt t)))

;; Start org note and capture buffers in insert state.
(add-hook 'org-log-buffer-setup-hook #'evil-insert-state)
(add-hook 'org-capture-mode-hook #'evil-insert-state)

(setq org-refile-targets '((org-agenda-files :maxlevel . 1)))

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; `org-reverse-note-order' set to true along with the two following hooks gets
;; us two things after refiling:
;; 1. Line breaks between top-level headings are maintained.
;; 2. Entries are sorted and top-level heading visibility is set to CHILDREN.
(setq org-reverse-note-order t)

(add-hook 'org-after-refile-insert-hook
          (lambda ()
            (interactive)
            (mpereira/org-sort-parent-entries nil ?o)))

(add-hook 'org-after-sorting-entries-or-items-hook #'mpereira/org-cycle-cycle)

;; Save org buffers after some operations.
(dolist (hook '(org-refile
                org-agenda-add-note
                org-agenda-deadline
                org-agenda-kill
                org-agenda-refile
                org-agenda-schedule
                org-agenda-set-property
                org-agenda-set-tags))
  ;; https://github.com/bbatsov/helm-projectile/issues/51
  (advice-add hook :after (lambda (&rest _) (org-save-all-org-buffers))))

(defun mpereira/org-unfill-toggle ()
  "Toggle filling/unfilling of the current region, or current paragraph if no
region active."
  (interactive)
  (let (deactivate-mark
        (fill-column
         (if (eq last-command this-command)
             (progn (setq this-command nil)
                    most-positive-fixnum)
           fill-column)))
    (call-interactively 'org-fill-paragraph)))

(defun mpereira/org-insert-heading ()
  "`org-insert-heading' will break the current heading unless the pointer is at
the beginning of the line. This fixes that."
  (interactive)
  (move-beginning-of-line nil)
  (org-insert-heading))

(general-define-key
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "o"
 "a" #'mpereira/open-or-build-main-org-agenda
 "A" #'mpereira/open-or-build-review-org-agenda
 "c" 'org-capture
 "Ci" 'org-clock-in
 "Co" 'org-clock-out
 "Cg" 'org-clock-goto
 "D" 'org-check-deadlines
 "l" 'org-store-link)

(general-define-key
 :keymaps '(org-mode-map)
 :states '(visual)
 "C-n" 'evil-multiedit-match-and-next
 "C-p" 'evil-multiedit-match-and-prev)

(general-define-key
 :keymaps '(org-mode-map)
 :states '(normal)
 "t" 'org-todo
 "T" 'mpereira/org-insert-heading
 "M-t" 'org-insert-heading-after-current
 "(" 'org-up-element
 ")" 'org-down-element
 "k" 'evil-previous-visual-line
 "j" 'evil-next-visual-line
 "C-S-h" 'org-metaleft
 "C-S-j" 'org-metadown
 "C-S-k" 'org-metaup
 "C-S-l" 'org-metaright
 ;; TODO: make this call `org-babel-next-src-block' if there are no
 ;; sibling headings.
 "C-j" 'org-forward-heading-same-level
 ;; TODO: make this call `org-babel-previous-src-block' if there are
 ;; no sibling headings.
 "C-k" 'org-backward-heading-same-level
 ;; TODO: remove temporary keybinding.
 "C-n" 'org-babel-next-src-block
 ;; TODO: remove temporary keybinding.
 "C-p" 'org-babel-previous-src-block
 "C-S-j" 'org-move-subtree-down
 "C-S-k" 'org-move-subtree-up)

;; org source blocks ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun mpereira/maybe-org-edit-src-save ()
  (interactive)
  (if (buffer-modified-p)
      (org-edit-src-save)
    (message "(No changes need to be saved)")))

(general-define-key
 :states '(normal visual)
 :keymaps '(org-src-mode-map)
 :prefix mpereira/leader
 ;; Originally bound to `save-buffer' via the global keymap.
 "w" 'mpereira/maybe-org-edit-src-save
 ;; Originally bound to `org-edit-src-exit'.
 "q" 'evil-quit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(org-mode-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "f"
 "o" 'counsel-org-goto)

(general-define-key
 :keymaps '(org-mode-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "e"
 "e" 'org-babel-execute-src-block)

(general-define-key
 :keymaps '(org-mode-map)
 :states '(normal visual)
 "gq" 'mpereira/org-unfill-toggle)

(general-define-key
 :keymaps '(org-mode-map text-mode-map)
 :states '(normal visual insert)
 "M-q" 'mpereira/org-unfill-toggle)

(general-define-key
 :keymaps '(org-mode-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "o"
 "!" 'org-time-stamp-inactive
 "." 'org-time-stamp
 "|" 'org-columns
 "\\" 'org-columns
 "Cc" 'org-clock-cancel
 "Cd" 'org-clock-display
 "Ci" 'org-clock-in
 "Cl" 'org-clock-in-last
 "Co" 'org-clock-out
 "d" 'org-deadline
 "D" 'org-archive-hierarchically
 "b" (lambda ()
       (interactive)
       (mpereira/call-interactively-with-prefix-arg
        '(4)
        'org-tree-to-indirect-buffer))
 "B" 'outline-show-branches
 "f" 'org-attach
 "i" 'org-insert-link
 "k" 'org-cut-subtree
 "n" 'org-add-note
 "p" 'org-set-property
 "P" 'org-priority
 "r" 'org-refile
 "X" (lambda ()
       (interactive)
       (mpereira/call-interactively-with-prefix-arg
        '(4) 'org-babel-remove-result-one-or-many))
 "Rd" (lambda ()
        (interactive)
        (mpereira/call-interactively-with-prefix-arg
         '(4) 'org-deadline))
 "Rs" (lambda ()
        (interactive)
        (mpereira/call-interactively-with-prefix-arg
         '(4) 'org-schedule))
 "s" 'org-schedule
 "S" 'org-sort-entries
 "t" 'counsel-org-tag
 "u" 'org-toggle-link-display
 "w" 'org-web-tools-insert-web-page-as-entry
 "x" 'org-export-dispatch
 "y" 'org-copy-subtree)

(general-define-key
 :keymaps '(org-columns-map)
 "s" (lambda ()
       (interactive)
       (org-columns-quit)
       (org-sort-entries nil ?r)
       (org-columns)))
#+end_src

** Org Babel
*** verb
#+begin_src emacs-lisp :tangle yes
(use-package verb
  :config
  (setq tempo-template-org-verb '("#+begin_src verb :wrap src ob-verb-response"
                                  nil '> n p n
                                  "#+end_src" >))
  (add-to-list 'org-tempo-tags '("<h" . tempo-template-org-verb)))
#+end_src

*** org-babel
#+begin_src emacs-lisp :tangle yes
(defun mpereira/org-babel-initialize ()
  "TODO: docstring."
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((shell . t)
                                 (emacs-lisp . t)
                                 (python . t)
                                 (verb . t)))

  (setq org-confirm-babel-evaluate nil)

  ;; By default, don't evaluate src blocks when exporting.
  (setq org-export-use-babel nil)

  ;; REVIEW: doing this causes :e to load the whole file contents into the src
  ;; block buffer.
  ;; (defadvice org-edit-src-code (around set-buffer-file-name activate compile)
  ;;   (let ((file-name (buffer-file-name)))
  ;;     ad-do-it
  ;;     (setq buffer-file-name file-name)))
  )

(mpereira/org-babel-initialize)
#+end_src

*** Prevent o/O (=evil-open-below/above=) from scrolling window
It calls =indent-according-to-mode= which does the undesired scrolling.

https://github.com/emacs-evil/evil/issues/1068

#+begin_src emacs-lisp :tangle yes
(defun mpereira/evil-open-no-auto-indent (oldfun arg)
  (if (and evil-auto-indent
           (eq major-mode 'org-mode))
      (let ((evil-auto-indent nil))
        (funcall oldfun arg))
    (funcall oldfun arg)))

(advice-add #'evil-open-above :around #'mpereira/evil-open-no-auto-indent)
(advice-add #'evil-open-below :around #'mpereira/evil-open-no-auto-indent)
#+end_src

** Align all tags in the buffer on tag changes
#+begin_src emacs-lisp :tangle yes
(defun mpereira/org-align-all-tags ()
  "Aligns all org tags in the buffer."
  (interactive)
  (when (eq major-mode 'org-mode)
    (org-align-tags t)))

(add-hook 'org-after-tags-change-hook #'mpereira/org-align-all-tags)
#+end_src

** Sort org entries by multiple properties
I have org trees for projects which I like sorted by:
| Priority | Order | Property |
|        1 | asc   | TODO     |
|        2 | asc   | PRIORITY |
|        3 | asc   | ALLTAGS  |
|        4 | desc  | CLOSED   |
|        5 | desc  | CREATED  |
|        6 | asc   | ITEM     |

I get that with ~M-x mpereira/org-sort-entries~.

#+begin_src emacs-lisp :tangle yes
(defun mpereira/todo-to-int (todo)
  "Returns incrementally bigger integers for todo values.

Example: | todo  | int |
         |-------+-----|
         | TODO  |   0 |
         | DOING |   1 |
         | DONE  |   2 |"
  (first (-non-nil
          (mapcar (lambda (keywords)
                    (let ((todo-seq
                           (-map (lambda (x) (first (split-string  x "(")))
                                 (rest keywords))))
                      (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
                  org-todo-keywords))))

(defun mpereira/escape-string (s)
  "Makes strings safe to be printed with `message'."
  (s-replace-all '(("%" . "%%")) s))

(defun mpereira/org-todo-completed? (todo)
  (or (string= "DONE" todo)
      (string= "CANCELLED" todo)))

(defun mpereira/org-sort-key ()
  "Returns a sort key for an org entry based on:

| Priority | Order | Property |
|----------+-------+----------|
|        1 | asc   | TODO     |
|        2 | asc   | PRIORITY |
|        3 | asc   | ALLTAGS  |
|        4 | desc  | CLOSED   |
|        5 | desc  | CREATED  |
|        6 | asc   | ITEM     |

if they aren't DONE or CANCELLED. In that case the sort key disregards tags,
giving priority to CREATED:

| Priority | Order | Property |
|----------+-------+----------|
|        1 | asc   | TODO     |
|        2 | asc   | PRIORITY |
|        4 | desc  | CLOSED   |
|        5 | desc  | CREATED  |
|        6 | asc   | ITEM     |
"
  (interactive)
  (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
         (todo (org-entry-get (point) "TODO"))
         (todo-int (if (and todo (mpereira/todo-to-int todo))
                       (mpereira/todo-to-int todo)
                     todo-max))
         (priority (org-entry-get (point) "PRIORITY"))
         (priority-int (if priority (string-to-char priority) org-default-priority))
         (date-int-min 10000000000000) ; YYYY=1000 mm=00 dd=00 HH=00 MM=00 SS=00
         (date-int-max 30000000000000) ; YYYY=3000 mm=00 dd=00 HH=00 MM=00 SS=00
         (closed (org-entry-get (point) "CLOSED"))
         (closed-int (if closed
                         (string-to-number
                          (ts-format "%Y%m%d%H%M%S" (ts-parse-org closed)))
                       date-int-min))
         (created (org-entry-get (point) "CREATED"))
         (created-int (if created
                          (string-to-number
                           (ts-format "%Y%m%d%H%M%S" (ts-parse-org created)))
                        date-int-min))
         (alltags-default "zzzzzzzzzz")
         (alltags (or (org-entry-get (point) "ALLTAGS")
                      alltags-default))
         (item (org-entry-get (point) "ITEM"))
         (sort-key (format "%03d %03d %s %.10f %.10f %s"
                           todo-int
                           priority-int
                           (if (mpereira/org-todo-completed? todo)
                               alltags-default
                             alltags)
                           (/ (float date-int-max) closed-int)
                           (/ (float date-int-max) created-int)
                           (mpereira/escape-string item))))
    sort-key))

(defun mpereira/org-sort-entries ()
  "Sorts child entries based on `mpereiera/ort-sort-key'."
  (interactive)
  (save-excursion
    (org-sort-entries nil ?f #'mpereira/org-sort-key)))
#+end_src

** Org clock
#+begin_src emacs-lisp :tangle yes
;; org-clock stuff.
(setq org-clock-idle-time 15)
(setq org-clock-mode-line-total 'current)
;; Maybe automatically switching to DOING is not the best idea. Leaving it
;; commented for now.
;; (setq org-clock-in-switch-to-state "DOING")

;; Resume clocking task when emacs is restarted.
(org-clock-persistence-insinuate)
;; Save the running clock and all clock history when exiting Emacs, load it on
;; startup.
(setq org-clock-persist t)
;; Resume clocking task on clock-in if the clock is open.
(setq org-clock-in-resume t)
;; Do not prompt to resume an active clock, just resume it.
(setq org-clock-persist-query-resume nil)
;; Clock out when moving task to a done state.
(setq org-clock-out-when-done t)
;; Include current clocking task in clock reports.
(setq org-clock-report-include-clocking-task t)
;; Use pretty things for the clocktable.
(setq org-pretty-entities nil)
#+end_src

** org-gcal
#+begin_src emacs-lisp :tangle yes
(use-package org-gcal
  :config
  (setq mpereira/org-gcal-directory (expand-file-name "gcal" org-directory))

  (load-file (expand-file-name "org-gcal-secrets.el" user-emacs-directory))

  (setq org-gcal-client-id mpereira/secret-org-gcal-client-id)
  (setq org-gcal-client-secret mpereira/secret-org-gcal-client-secret)
  (setq org-gcal-file-alist mpereira/secret-org-gcal-file-alist)
  (setq org-gcal-auto-archive nil)
  (setq org-gcal-notify-p nil))
#+end_src

** Org agenda
#+begin_src emacs-lisp :tangle yes
(require 'org-agenda)

(setq org-agenda-files (list org-directory
                             mpereira/org-gcal-directory))

;; Full screen org-agenda.
(setq org-agenda-window-setup 'only-window)
;; Don't destroy window splits.
(setq org-agenda-restore-windows-after-quit t)
;; Show only the current instance of a repeating timestamp.
(setq org-agenda-repeating-timestamp-show-all nil)
;; Don't look for free-form time string in headline.
(setq org-agenda-search-headline-for-time nil)

(setq org-agenda-tags-column -120)

(setq org-agenda-format-date 'mpereira/org-agenda-format-date)

;; Redo agenda after capturing.
(add-hook 'org-capture-after-finalize-hook 'org-agenda-maybe-redo)

;; Don't show empty agenda sections.
(add-hook 'org-agenda-finalize-hook #'mpereira/org-agenda-delete-empty-blocks)

;; Disable `evil-lion-mode' so that "g" keeps the mapping to
;; `org-agenda-maybe-redo'.
(add-hook 'org-agenda-finalize-hook (lambda () (evil-lion-mode -1)))

(defun mpereira/org-gcal-entry-at-point-p ()
  (when-let ((link (org-entry-get (point) "LINK")))
    (string-match "Go to gcal web page" link)))

(evil-set-initial-state 'org-agenda-mode 'normal)

(general-define-key
 :keymaps '(org-agenda-mode-map)
 :states '(normal emacs)
 "/" 'org-agenda-filter-by-regexp
 "<" #'org-agenda-filter-by-category
 "c" (lambda ()
       (interactive)
       ;; When capturing to a calendar org-gcal sends a network request that
       ;; reorders the calendar headings on completion, causing them to have a
       ;; different order than the agenda entries. Here we install a buffer
       ;; local hook that will sync the agenda entries with the calendar
       ;; headings.
       (add-hook 'org-capture-after-finalize-hook
                 (lambda ()
                   (interactive)
                   (run-at-time mpereira/org-gcal-request-timeout
                                nil
                                #'org-agenda-maybe-redo))
                 nil
                 t)
       (org-agenda-capture))
 "d" #'org-agenda-deadline
 "f" #'org-attach
 "F" #'org-gcal-sync
 "g" #'mpereira/build-org-agenda
 "h" nil
 "i" #'org-agenda-clock-in
 "j" #'org-agenda-next-item
 "k" #'org-agenda-previous-item
 "l" nil
 "o" #'org-agenda-clock-out
 "n" #'org-agenda-add-note
 "q" #'org-agenda-quit
 "r" #'org-agenda-refile
 "s" #'org-agenda-schedule
 "q" #'mpereira/close-org-agenda
 "t" #'org-agenda-todo
 "T" #'org-agenda-set-tags
 "u" #'org-agenda-undo
 "w" nil
 "x" (lambda ()
       (interactive)
       (save-window-excursion
         (let ((agenda-buffer (current-buffer)))
           (org-agenda-goto)
           (if (mpereira/org-gcal-entry-at-point-p)
               (progn
                 (org-gcal-delete-at-point)
                 ;; org-gcal only removes the calendar headings after the
                 ;; network request finishes.
                 (run-at-time mpereira/org-gcal-request-timeout
                              nil
                              #'org-agenda-maybe-redo))
             (progn
               (quit-window)
               (org-agenda-kill))))))
 "C-j" #'org-agenda-next-item
 "C-k" #'org-agenda-previous-item
 "C-f" #'scroll-up-command
 "C-b" #'scroll-down-command)

(defmacro calendar-action (func)
  `(lambda ()
     "TODO: docstring."
     (interactive)
     (org-eval-in-calendar #'(,func 1))))

(general-define-key
 :keymaps '(org-read-date-minibuffer-local-map)
 "q" 'minibuffer-keyboard-quit
 "h" (calendar-action calendar-backward-day)
 "l" (calendar-action calendar-forward-day)
 "k" (calendar-action calendar-backward-week)
 "j" (calendar-action calendar-forward-week)
 "{" (calendar-action calendar-backward-month)
 "}" (calendar-action calendar-forward-month)
 "[" (calendar-action calendar-backward-year)
 "]" (calendar-action calendar-forward-year)
 "(" (calendar-action calendar-beginning-of-month)
 ")" (calendar-action calendar-end-of-month)
 "0" (calendar-action calendar-beginning-of-week)
 "$" (calendar-action calendar-end-of-week))
#+end_src

** My custom persistent (cached) org agendas
My agendas are a bit heavy to build so I don't kill their buffers (I use
~set-window-configuration~ instead to go back to the window configuration state
right before opening the agenda, which is bound to =q=). I have keybindings
(=<leader> O a= for the main agenda and =<leader> O A= for the review agenda) that
display an existing agenda buffer, or build and display a fresh agenda buffer.

I'm also planning to add automatic and periodic background refreshing (and
perhaps exporting) of the agenda buffers with ~run-with-idle-timer~ soon.

*** Agenda library
These are functions that I use in the actual custom agenda definitions.

#+begin_src emacs-lisp :tangle yes
(defun mpereira/org-current-subtree-state-p (state)
  (string= state (org-get-todo-state)))

(defun mpereira/org-up-heading-top-level ()
  "Move to the top level heading."
  (while (not (= 1 (org-outline-level)))
    (org-up-heading-safe)))

(defun mpereira/org-skip-all-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (mpereira/org-current-subtree-state-p "TODO")
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (mpereira/org-current-subtree-state-p "TODO"))
        (setq should-skip-entry t)))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(defun mpereira/org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun mpereira/org-skip-subtree-unless-habit ()
  "Skip an agenda entry unless it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        nil
      subtree-end)))

(defun mpereira/org-skip-inbox ()
  "Skip agenda entries coming from the inbox."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-get-category) "inbox")
        subtree-end
      nil)))

(defun mpereira/org-skip-someday-projects-subheadings ()
  "Skip agenda entries under a project with state \"SOMEDAY\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (mpereira/org-up-heading-top-level)
    (if (mpereira/org-current-subtree-state-p "SOMEDAY")
        subtree-end
      nil)))

(defun mpereira/org-entry-at-point-get (property)
  (org-entry-get (point) property))

(defun mpereira/org-entry-parent-root-heading ()
  "Returns the root heading for the entry at point. Makes the root heading
available in the kill ring if called interactively.

For example, in an org file like

,* Emacs
,** TODO Periodically refresh org agenda

the \"parent root heading\" for the TODO entry would be \"Emacs\".
the \"parent root heading\" for the \"Emacs\" entry would be nil.
"
  (interactive)
  (let* ((outline-path (condition-case err
                           (org-get-outline-path t)
                         (error
                          (message "Error calling `org-get-outline-path' with heading (%s): %s"
                                   (org-get-heading)
                                   (error-message-string err))
                          "?")))
         (parent-heading-name (when (< 1 (length outline-path))
                                (car outline-path))))
    (when (and parent-heading-name
               (called-interactively-p 'any))
      (kill-new parent-heading-name))
    ;; `concat' turns nil into an empty string.
    (concat parent-heading-name)))

(defun mpereira/timestamp-type ()
  (interactive)
  (cond
   ((mpereira/org-entry-at-point-get "DEADLINE") "Deadline")
   ((mpereira/org-entry-at-point-get "SCHEDULED") "Scheduled")
   ((mpereira/org-entry-at-point-get "TIMESTAMP") "Timestamp")
   ((mpereira/org-entry-at-point-get "TIMESTAMP_IA") "Timestamp (inactive)")))

(defun mpereira/org-agenda-tags-prefix-format ()
  "Used in the \"tags\" section of the main org agenda.

This function is only necessary because multiple EXPRESSIONs would be required
to achieve the same outcome just with a single `org-agenda-prefix-format', and
that's not allowed."
  (interactive)
  (let* ((timestamp (or (mpereira/org-entry-at-point-get "DEADLINE")
                        (mpereira/org-entry-at-point-get "SCHEDULED")
                        (mpereira/org-entry-at-point-get "TIMESTAMP")))
         (current (calendar-date-string (calendar-current-date)))
         (days (time-to-number-of-days (time-subtract
                                        (org-read-date nil t timestamp)
                                        (org-read-date nil t current))))
         (date (format-time-string "%d %b" (org-read-date t t timestamp))))
    (concat (format "%-20s"
                    (s-truncate 18
                                (mpereira/org-entry-parent-root-heading)
                                "…"))
            (format "%11s: " (mpereira/timestamp-type))
            " "
            (format "%6s" (format "In %dd" days))
            " "
            (format "%8s" (format "(%s)" date)))))

(defun mpereira/org-agenda-format-date (date)
  "Format a DATE string for display in the daily/weekly agenda.
This function makes sure that dates are aligned for easy reading."
  (let* ((dayname (calendar-day-name date))
         (day (cadr date))
         (day-of-week (calendar-day-of-week date))
         (month (car date))
         (monthname (calendar-month-name month))
         (year (nth 2 date)))
    (format "\n%-9s %2d %s"
            dayname day monthname year)))

(defun mpereira/yesterday ()
  (time-subtract (current-time) (days-to-time 1)))

(defun mpereira/time-to-calendar-date (time)
  (let* ((decoded-time (decode-time time))
         (day (nth 3 decoded-time))
         (month (nth 4 decoded-time))
         (year (nth 5 decoded-time)))
    (list month day year)))

(defun mpereira/format-calendar-date-Y-m-d (calendar-date)
  (format-time-string "%Y-%m-%d"
                      (mpereira/calendar-date-to-time calendar-date)))

(defun mpereira/format-calendar-date-d-m-Y (calendar-date)
  (format-time-string "%d %B %Y"
                      (mpereira/calendar-date-to-time calendar-date)))

(defun mpereira/calendar-date-to-time (calendar-date)
  (let* ((day (calendar-extract-day calendar-date))
         (month (calendar-extract-month calendar-date))
         (year (calendar-extract-year calendar-date)))
    (encode-time 0 0 0 day month year)))

(defun mpereira/calendar-read-date (string)
  (mpereira/time-to-calendar-date (org-read-date t t string)))

(defun mpereira/org-agenda-date-week-start (string)
  "Returns the first day of the week at DATE."
  (let* ((calendar-date (mpereira/calendar-read-date string)))
    (mpereira/format-calendar-date-Y-m-d
     (mpereira/time-to-calendar-date
      (time-subtract
       (mpereira/calendar-date-to-time calendar-date)
       (days-to-time (if (zerop (calendar-day-of-week calendar-date))
                         6 ;; magic.
                       (- (calendar-day-of-week calendar-date)
                          calendar-week-start-day))))))))

(defun mpereira/org-agenda-date-week-end (string)
  "Returns the last day of the week at DATE."
  (let* ((calendar-date (mpereira/calendar-read-date string)))
    (if (= (calendar-week-end-day) (calendar-day-of-week calendar-date))
        string
      (mpereira/format-calendar-date-Y-m-d
       (mpereira/time-to-calendar-date
        (time-add
         (mpereira/calendar-date-to-time calendar-date)
         (days-to-time (- 7 (calendar-day-of-week calendar-date)))))))))

(defun mpereira/org-agenda-review-prefix-format ()
  (let* ((timestamp (or (mpereira/org-entry-at-point-get "CLOSED")
                        (mpereira/org-entry-at-point-get "DEADLINE")
                        (mpereira/org-entry-at-point-get "TIMESTAMP")
                        (mpereira/org-entry-at-point-get "TIMESTAMP_IA")
                        (mpereira/org-entry-at-point-get "SCHEDULED")))
         (calendar-date (mpereira/calendar-read-date timestamp)))
    (format "%-20s  %s"
            (s-truncate 18 (mpereira/org-entry-parent-root-heading) "…")
            (mpereira/format-calendar-date-Y-m-d calendar-date))))

(defun mpereira/org-agenda-review-search (start end)
  (concat "CLOSED>=\"<" start ">\""
          "&"
          "CLOSED<=\"<" end ">\""
          "|"
          "TIMESTAMP_IA>=\"<" start ">\""
          "&"
          "TIMESTAMP_IA<=\"<" end ">\""
          "|"
          "TIMESTAMP>=\"<" start ">\""
          "&"
          "TIMESTAMP<=\"<" end ">\""))

;; https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00266.html
(defun mpereira/org-agenda-delete-empty-blocks ()
  "Remove empty agenda blocks.
A block is identified as empty if there are fewer than 2 non-empty
lines in the block (excluding the line with
`org-agenda-block-separator' characters)."
  (when org-agenda-compact-blocks
    (user-error "Cannot delete empty compact blocks"))
  (setq buffer-read-only nil)
  (save-excursion
    (goto-char (point-min))
    (let* ((blank-line-re "^\\s-*$")
           (content-line-count (if (looking-at-p blank-line-re) 0 1))
           (start-pos (point))
           (block-re (format "%c\\{10,\\}" org-agenda-block-separator)))
      (while (and (not (eobp)) (forward-line))
        (cond
         ((looking-at-p block-re)
          (when (< content-line-count 2)
            (delete-region start-pos (1+ (point-at-bol))))
          (setq start-pos (point))
          (forward-line)
          (setq content-line-count (if (looking-at-p blank-line-re) 0 1)))
         ((not (looking-at-p blank-line-re))
          (setq content-line-count (1+ content-line-count)))))
      (when (< content-line-count 2)
        (delete-region start-pos (point-max)))
      (goto-char (point-min))
      ;; The above strategy can leave a separator line at the beginning of the
      ;; buffer.
      (when (looking-at-p block-re)
        (delete-region (point) (1+ (point-at-eol))))))
  (setq buffer-read-only t))
#+end_src

*** Main agenda
#+begin_src emacs-lisp :tangle yes
(defvar mpereira/main-org-agenda-buffer-name "*Main Org Agenda*"
  "The name of the main org agenda.")

(defvar mpereira/main-org-agenda-last-built nil
  "The last time the main org agenda was built.")

(defvar mpereira/main-org-agenda-previous-window-configuration nil
  "A window configuration to return to when closing the main org agenda.")

(defvar mpereira/main-org-agenda-previous-point nil
  "A point to return to when closing the main org agenda.")

(defun mpereira/build-main-org-agenda ()
  "Build and display the main org agenda."
  (interactive)
  ;; Remember that EXPRESSION (e.g. "%(foo)") can be used only once per
  ;; `org-agenda-prefix-format'.
  (let* ((todo-prefix-format
          (concat "  "
                  ;; CATEGORY property or file name.
                  "%-10c"
                  " "
                  ;; Truncated root heading.
                  "%-20(s-truncate 18 (mpereira/org-entry-parent-root-heading) \"…\")"
                  " "
                  ;; Time of day specification.
                  "%?-12t"
                  " "
                  ;; Scheduling/Deadline information.
                  "%-12s"))
         (tags-prefix-format
          (concat "  "
                  ;; CATEGORY property or file name.
                  "%-10c"
                  " "
                  "%(mpereira/org-agenda-tags-prefix-format)"
                  "  "))
         (agenda-ignore-todos '(list "DOING" "WAITING" "DONE" "CANCELLED"))
         (settings
          `((todo "DOING"
                  ((org-agenda-overriding-header "\nDoing\n")
                   (org-agenda-prefix-format ,todo-prefix-format)))
            (todo "WAITING"
                  ((org-agenda-overriding-header "\nWaiting\n")
                   (org-agenda-prefix-format ,todo-prefix-format)))
            (agenda ""
                    ((org-agenda-overriding-header
                      (concat
                       "\nToday "
                       "(" (format-time-string "%A, %B %d" (current-time)) ")"))
                     (org-deadline-warning-days 0)
                     (org-agenda-span 'day)
                     (org-agenda-use-time-grid t)
                     (org-agenda-format-date "")
                     (org-agenda-prefix-format ,todo-prefix-format)
                     (org-habit-show-habits nil)
                     ;; Not using something like (org-agenda-skip-entry-if
                     ;; 'nottodo '("TODO")) here because I want non-TODO
                     ;; headings (e.g. calendar events) showing up here as well.
                     (org-agenda-skip-function
                      (quote (org-agenda-skip-entry-if 'todo ,agenda-ignore-todos)))))
            (agenda ""
                    ((org-agenda-overriding-header "\nNext 7 Days")
                     (org-agenda-start-day "+1d")
                     (org-agenda-span 'week)
                     (org-agenda-start-on-weekday nil)
                     (org-agenda-prefix-format ,todo-prefix-format)
                     ;; Not using something like (org-agenda-skip-entry-if
                     ;; 'nottodo '("TODO")) here because I want non-TODO
                     ;; headings (e.g. calendar events) showing up here as well.
                     (org-agenda-skip-function
                      (quote (org-agenda-skip-entry-if 'todo ,agenda-ignore-todos)))))
            (tags (concat "SCHEDULED>=\"<+8d>\"&SCHEDULED<=\"<+30d>\""
                          "|"
                          "DEADLINE>=\"<+8d>\"&DEADLINE<=\"<+30d>\""
                          "|"
                          "TIMESTAMP>=\"<+8d>\"&TIMESTAMP<=\"<+30d>\""
                          "|"
                          "TIMESTAMP_IA>=\"<+8d>\"&TIMESTAMP_IA<=\"<+30d>\""
                          "/-DONE")
                  ((org-agenda-overriding-header "\nComing up\n")
                   (org-agenda-prefix-format ,tags-prefix-format)
                   (org-agenda-sorting-strategy '(timestamp-up))))))
         (inbox-file (expand-file-name "inbox.org" org-directory))
         (inbox-buffer (find-file-noselect inbox-file))
         (inbox (with-current-buffer inbox-buffer
                  (org-element-contents (org-element-parse-buffer 'headline))))
         (_ (when inbox
              (add-to-list
               'settings
               `(todo "TODO"
                      ((org-agenda-overriding-header "\nInbox\n")
                       (org-agenda-prefix-format ,todo-prefix-format)
                       (org-agenda-files (list ,inbox-file)))))))
         (org-agenda-buffer-name mpereira/main-org-agenda-buffer-name)
         (org-agenda-custom-commands (list
                                      (list
                                       "c" "Main agenda"
                                       settings
                                       '((org-agenda-block-separator ?\-))))))
    (org-agenda nil "c")
    (setq mpereira/main-org-agenda-last-built (ts-now))))

(defun mpereira/open-or-build-main-org-agenda ()
  "Display main org agenda if it was already built. Build and display it
otherwise."
  (interactive)
  (let ((org-agenda-buffer (get-buffer mpereira/main-org-agenda-buffer-name)))
    (setq mpereira/main-org-agenda-previous-window-configuration
          (current-window-configuration))
    (setq mpereira/main-org-agenda-previous-point (point))
    (if (bufferp org-agenda-buffer)
        (progn
          (switch-to-buffer org-agenda-buffer)
          (delete-other-windows)
          (let ((last-built (ts-human-format-duration
                             (ts-difference (ts-now)
                                            mpereira/main-org-agenda-last-built))))
            (message (format "Last built %s ago" last-built))))
      (progn
        (mpereira/build-main-org-agenda)
        (message "Built now")))))
#+end_src

*** Review agenda
#+begin_src emacs-lisp :tangle yes
(defvar mpereira/review-org-agenda-buffer-name "*Review Org Agenda*"
  "The name of the review org agenda.")

(defvar mpereira/review-org-agenda-last-built nil
  "The last time the review org agenda was built.")

(defvar mpereira/review-org-agenda-previous-window-configuration nil
  "A window configuration to return to when closing the review org agenda.")

(defvar mpereira/review-org-agenda-previous-point nil
  "A point to return to when closing the review org agenda.")

(defun mpereira/build-review-org-agenda ()
  "Build and display the review org agenda."
  (interactive)
  (let* ((single-day-prefix-format " %-10c %?-12t% s")
         (multi-day-prefix-format " %-10c %(mpereira/org-agenda-review-prefix-format) ")
         (settings
          `((tags ,(mpereira/org-agenda-review-search "today" "+1d")
                  ((org-agenda-overriding-header
                    (concat
                     "\nDone today "
                     "(" (format-time-string "%A, %B %d" (current-time)) ")\n"))
                   (org-agenda-prefix-format ,single-day-prefix-format)))
            (tags ,(mpereira/org-agenda-review-search "-1d" "today")
                  ((org-agenda-overriding-header
                    (concat
                     "\nDone yesterday "
                     "(" (format-time-string "%A, %B %d" (mpereira/yesterday)) ")\n"))
                   (org-agenda-prefix-format ,single-day-prefix-format)))
            (tags ,(mpereira/org-agenda-review-search
                    (mpereira/org-agenda-date-week-start
                     (mpereira/format-calendar-date-Y-m-d
                      (mpereira/calendar-read-date "today")))
                    (mpereira/format-calendar-date-Y-m-d
                     (mpereira/calendar-read-date "today")))
                  ((org-agenda-overriding-header "\nDone this week\n")
                   (org-agenda-prefix-format ,multi-day-prefix-format)
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-show-all-dates t)
                   (org-agenda-sorting-strategy '(timestamp-down))))
            (tags (mpereira/org-agenda-review-search
                   (mpereira/org-agenda-date-week-start
                    (mpereira/format-calendar-date-Y-m-d
                     (mpereira/calendar-read-date "-1w")))
                   (mpereira/org-agenda-date-week-end
                    (mpereira/format-calendar-date-Y-m-d
                     (mpereira/calendar-read-date "-1w"))))
                  ((org-agenda-overriding-header "\nDone last week\n")
                   (org-agenda-prefix-format ,multi-day-prefix-format)
                   (org-agenda-show-all-dates t)
                   (org-agenda-sorting-strategy '(timestamp-down))))))
         (org-agenda-buffer-name mpereira/review-org-agenda-buffer-name)
         (org-agenda-custom-commands (list
                                      (list
                                       "c" "Review agenda"
                                       settings
                                       '((org-agenda-block-separator ?\-))))))
    (org-agenda nil "c")
    (setq mpereira/review-org-agenda-last-built (ts-now))))

(defun mpereira/open-or-build-review-org-agenda ()
  "Display review org agenda if it was already built. Build and display it
otherwise."
  (interactive)
  (let ((org-agenda-buffer (get-buffer mpereira/review-org-agenda-buffer-name)))
    (setq mpereira/review-org-agenda-previous-window-configuration
          (current-window-configuration))
    (setq mpereira/review-org-agenda-previous-point (point))
    (if (bufferp org-agenda-buffer)
        (progn
          (switch-to-buffer org-agenda-buffer)
          (delete-other-windows)
          (let ((last-built (ts-human-format-duration
                             (ts-difference
                              (ts-now)
                              mpereira/review-org-agenda-last-built))))
            (message (format "Last built %s ago" last-built))))
      (progn
        (mpereira/build-review-org-agenda)
        (message "Built now")))))
#+end_src

*** Common
#+begin_src emacs-lisp :tangle yes
(defun mpereira/build-org-agenda ()
  "Build the last opened org agenda."
  (interactive)
  (cond
   ((and mpereira/main-org-agenda-previous-window-configuration
         (not mpereira/review-org-agenda-previous-window-configuration))
    (funcall #'mpereira/build-main-org-agenda))
   ((and mpereira/review-org-agenda-previous-window-configuration
         (not mpereira/main-org-agenda-previous-window-configuration))
    (funcall #'mpereira/build-review-org-agenda))
   ((and mpereira/main-org-agenda-previous-window-configuration
         mpereira/review-org-agenda-previous-window-configuration)
    (if (ts<= mpereira/main-org-agenda-last-built
              mpereira/review-org-agenda-last-built)
        (funcall #'mpereira/build-review-org-agenda)
      (funcall #'mpereira/build-main-org-agenda)))))

(defun mpereira/close-org-agenda ()
  "Close the currently opened org agenda and restore the previous window
configuration and point position."
  (interactive)
  (let ((close-review-org-agenda
         (lambda ()
           (set-window-configuration
            mpereira/review-org-agenda-previous-window-configuration)
           (setq mpereira/review-org-agenda-previous-window-configuration nil)
           (goto-char mpereira/review-org-agenda-previous-point)
           (setq mpereira/review-org-agenda-previous-point nil)))
        (close-main-org-agenda
         (lambda ()
           (set-window-configuration
            mpereira/main-org-agenda-previous-window-configuration)
           (setq mpereira/main-org-agenda-previous-window-configuration nil)
           (goto-char mpereira/main-org-agenda-previous-point)
           (setq mpereira/main-org-agenda-previous-point nil))))
    (cond
     ((string= mpereira/main-org-agenda-buffer-name (buffer-name))
      (funcall close-main-org-agenda))
     ((string= mpereira/review-org-agenda-buffer-name (buffer-name))
      (funcall close-review-org-agenda))
     (t (mpereira/kill-buffer-and-maybe-window)))))
#+end_src

** counsel-org-clock
#+begin_src emacs-lisp :tangle yes
(use-package counsel-org-clock
  :config
  (setq counsel-org-clock-default-action 'clock-in))
#+end_src

** org-web-tools
~org-web-tools-insert-web-page-as-entry~ is so useful. I use it to capture
websites into my to-read list.

#+begin_src emacs-lisp :tangle yes
(use-package org-web-tools)
#+end_src

** org-expiry
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-modules 'org-expiry)

(require 'org-expiry)

(setq org-expiry-inactive-timestamps t)

(org-expiry-insinuate)

(add-hook 'org-capture-before-finalize-hook 'org-expiry-insert-created)
#+end_src

** org-bullets
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** org-make-toc
#+begin_src emacs-lisp :tangle yes
(use-package org-make-toc
  :after org)
#+end_src

** org-tree-slide
#+begin_src emacs-lisp :tangle yes
(use-package org-tree-slide)
#+end_src

** org-sidebar
#+begin_src emacs-lisp :tangle yes
(use-package org-sidebar)
#+end_src

** org-pomodoro
#+begin_src emacs-lisp :tangle yes
(use-package org-pomodoro
  :config
  (setq org-pomodoro-format "%s"))
#+end_src

** org-archive-hierarchically
FIXME: this seems to insert unwanted whitespace between the parent and the first
child tree.

#+begin_src emacs-lisp :tangle yes
(use-package org-archive-hierarchically
  :ensure nil
  :quelpa (org-archive-hierarchically
           :fetcher gitlab
           :repo "andersjohansson/org-archive-hierarchically"))
#+end_src

** org-autonum
#+begin_src emacs-lisp :tangle yes
(use-package org-autonum
  :ensure nil
  :quelpa (org-autonum
           :fetcher github
           :repo "nma83/org-autonum"))

(defun re-seq (regexp string)
  "Get a list of all regexp matches in a string."
  (save-match-data
    (let ((pos 0)
          matches)
      (while (string-match regexp string pos)
        (push (match-string 0 string) matches)
        (setq pos (match-end 0)))
      matches)))

;; FIXME: the `'tree' scope doesn't seem to be working. Calling this
;; function on a heading with subsequent siblings will consider the
;; first heading the root of all the other ones.
;; This is because of the promote/demote hack.
(defun mpereira/org-enumerate-headings ()
  "TODO: docstring."
  (interactive)
  (save-excursion
    (let ((spacing nil)
          (current-level (org-current-level))
          (enumeration '()))
      (org-back-to-heading)
      (dotimes (i (- current-level 1))
        (org-promote-subtree))
      (org-map-entries
       (lambda ()
         ;; We subtract 1 because we want the relevant outlines being
         ;; considered to have level 1.
         (setq level (- (org-outline-level) 1))
         (print (list (list 'level level) (list 'enumeration enumeration)))
         ;; Skip the tree root entry.
         (when (> level 0)
           ;; Move to start of heading text.
           (re-search-forward "\\* " (line-end-position) t)
           (if (< (length enumeration) level)
               ;; Expand enumeration to next level.
               (setq enumeration (append enumeration '(0)))
             (if (not (= (length enumeration) level))
                 ;; Prune enumeration to current level.
                 (setq enumeration (butlast enumeration
                                            (- (length enumeration)
                                               level)))))
           ;; Increment last enumeration number.
           (setq enumeration (append (butlast enumeration 1)
                                     (list (1+ (car (last enumeration 1))))))
           (setq enumeration-string (concat
                                     (mapconcat
                                      'number-to-string enumeration ".")
                                     ". "))
           ;; FIXME: this isn't working.
           (if (re-search-forward (concat "* "
                                          "\\("
                                          "[[:digit:]]+\."
                                          "\\([[:digit:]]+\.\\)*"
                                          "\\)"
                                          " ")
                                  (line-end-position)
                                  t)
               ;; Replace existing enumeration if it's different.
               (unless (string= (match-string 0) enumeration-string)
                 (replace-match enumeration-string nil nil))
             ;; Insert new enumeration.
             (insert enumeration-string))))
       t
       'tree)
      (dotimes (i (- current-level 1))
        (org-demote-subtree)))))
#+end_src

** ob-async
#+begin_src emacs-lisp :tangle yes
(use-package ob-async)
#+end_src

** ox-jira
#+begin_src emacs-lisp :tangle yes
(use-package ox-jira)
#+end_src

** ox-confluence
This package lacks a file header as of [2019-06-23 Sun] and can't be installed
by Quelpa.
#+begin_src emacs-lisp :tangle yes
;; (use-package ox-confluence
;;   :ensure nil
;;   :quelpa (ox-confluence
;;            :url "https://raw.githubusercontent.com/emacsmirror/org/master/contrib/lisp/ox-confluence.el"
;;            :fetcher url))
;;
#+end_src

** ox-twbs
#+begin_src emacs-lisp :tangle yes
(use-package ox-twbs)
#+end_src

** ox-gfm
#+begin_src emacs-lisp :tangle yes
(use-package ox-gfm)
#+end_src

** ox-slimhtml
#+begin_src emacs-lisp :tangle yes
(use-package ox-slimhtml)
#+end_src

** ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package ox-hugo)
#+end_src

** ox-pandoc
#+begin_src emacs-lisp :tangle yes
(use-package ox-pandoc)
#+end_src

* File management
** dired
#+begin_src emacs-lisp :tangle yes
(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'always)
(setq dired-isearch-filenames 'dwim)
(setq delete-by-moving-to-trash t)
(setq dired-listing-switches "-AFlv --group-directories-first")
(setq find-ls-option ;; applies to `find-name-dired'
      '("-print0 | xargs -0 ls -AFlv --group-directories-first" . "-AFlv --group-directories-first"))
;;; activate this for case-insensitive names:
;; (setq find-name-arg "-iname")
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(dired-async-mode 1)

(require 'wdired)
(setq wdired-allow-to-change-permissions t)

(require 'dired-x)
(add-hook 'dired-mode-hook 'dired-omit-mode)

(general-define-key
 :keymaps '(dired-mode-map)
 :states '(normal visual)
 "(" 'dired-subtree-up
 "C-9" 'dired-hide-details-mode
 "C-j" 'dired-next-dirline
 "C-k" 'dired-prev-dirline)
#+end_src

** dired-show-readme
Disabled for now. Doesn't allow navigating README, doesn't render markdown.

#+begin_src emacs-lisp :tangle yes
(use-package dired-show-readme
  :disabled
  :ensure nil
  :quelpa (dired-show-readme
           :fetcher gitlab
           :repo "kisaragi-hiu/dired-show-readme")
  :config
  (add-hook 'dired-mode-hook 'dired-show-readme-mode))
#+end_src

** dired-subtree
#+begin_src emacs-lisp :tangle yes
(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
         ("<tab>" . dired-subtree-toggle)
         ("<S-tab>" . dired-subtree-cycle)))
#+end_src

** reveal-in-osx-finder
#+begin_src emacs-lisp :tangle yes
(use-package reveal-in-osx-finder)
#+end_src

* Shell, terminal
** with-editor
#+begin_src emacs-lisp :tangle yes
(use-package with-editor
  :config
  (add-hook 'eshell-mode-hook 'with-editor-export-editor)
  (add-hook 'term-exec-hook 'with-editor-export-editor)
  (add-hook 'shell-mode-hook 'with-editor-export-editor))
#+end_src

** xterm-color
#+begin_src emacs-lisp :tangle yes
(use-package xterm-color
  :config
  ;; Subprocesses of Emacs do not have direct access to the terminal, so unless
  ;; told otherwise they should only assume a dumb terminal. We are careful to
  ;; do it late (after `term-setup-hook'), although the new multi-tty code does
  ;; not use $TERM any more there anyway.
  ;; FIXME: is this needed?
  ;; (add-hook 'emacs-startup-hook (lambda ()
  ;;                                 (setenv "TERM" "xterm-256color")))

  (setq comint-output-filter-functions (remove 'ansi-color-process-output
                                               comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              (add-hook 'comint-preoutput-filter-functions
                        'xterm-color-filter
                        nil
                        t)))

  (defun mpereira/handle-progress-message (progress)
    (setq mode-line-process
          (if (string-match
               "Progress: \\[ *\\([0-9]+\\)%\\]" progress)
              (list
               (concat ":%s "
                       (match-string 1 progress)
                       "%%%% "))
            '(":%s")))
    (force-mode-line-update))

  (defun mpereira/handle-progress-bars-on-region (string)
    "Fix progress bars for e.g. apt(8).
Display progress in the mode line instead."

    (string-match "\0337.*\0338" "\033720%\0338\033722%\0338")

    (string= ""
             (replace-regexp-in-string "\\\\0337.*?\\\\0338" "" "\\033720%\\0338\\033722%\\0338"))
    (+ 2 2)

    (when (string-match comint-password-prompt-regexp string)
      (when (string-match "\0337.*\0338" string)
        (setq string (replace-match "" t t string)))
      (send-invisible string))


    (send-invisible (replace-regexp-in-string "\\\\0337.*?\\\\0338" "" string)))

  ;; (advice-add #'xterm-color-filter
  ;;             :before #'mpereira/handle-progress-bars-on-region)
  )
#+end_src

** shell
#+begin_src emacs-lisp :tangle yes
(add-hook 'shell-mode-hook 'buffer-disable-undo)

(general-define-key
 :keymaps '(shell-mode-map)
 :states '(insert)
 "C-l" 'comint-clear-buffer)
#+end_src

** eshell
#+begin_src emacs-lisp :tangle yes
(require 'eshell)
(require 'em-dirs) ;; for `eshell/pwd'.
(require 'em-smart)

;; Don't display the "Welcome to the Emacs shell" banner.
(setq eshell-banner-message "")

;; Make it possible to get a remote eshell buffer.
(add-to-list 'eshell-modules-list 'eshell-tramp)

(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US.UTF-8")

;; Don't page shell output.
(setenv "PAGER" "cat")

(setq eshell-scroll-to-bottom-on-input 'all)
(setq eshell-buffer-maximum-lines 20000)
(setq eshell-history-size 1000000)
(setq eshell-error-if-no-glob t)
(setq eshell-hist-ignoredups t)
(setq eshell-save-history-on-exit t)
;; `find` and `chmod` behave differently on eshell than unix shells. Prefer unix
;; behavior.
(setq eshell-prefer-lisp-functions nil)

;; Visual commands are commands which require a proper terminal. eshell will run
;; them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("htop" "top" "bash" "zsh" "fish" "glances" "watch"))
(setq eshell-visual-subcommands '())

(defun eshell/clear ()
  "Clears buffer while preserving input."
  (let* ((inhibit-read-only t)
         (input (eshell-get-old-input)))
    (eshell/clear-scrollback)
    (eshell-emit-prompt)
    (insert input)
    ;; This fixes the scenario where `ivy-completion-in-region-action' tries to
    ;; delete a region delimited by these two variables after they went out of
    ;; sync due to clearing an eshell buffer. The symptoms are broken completion
    ;; insertion and messages like: "Args out of range: #<buffer *eshell*>,
    ;; 237506, 237518" in the messages buffer. Should probably check with the
    ;; ivy people if this should be handled by ivy itself instead?
    (setq ivy-completion-beg nil)
    (setq ivy-completion-end nil)))

(defun mpereira/eshell-clear ()
  (interactive)
  (eshell/clear))

;; Inspired by Prot's.
(defun mpereira/eshell-complete-recent-directory (&optional arg)
  "Switch to a recent `eshell' directory using completion.
With \\[universal-argument] also open the directory in a `dired' buffer."
  (interactive "P")
  (ivy-read "Switch to recent dir: "
            (delete-dups (ring-elements eshell-last-dir-ring))
            :action (lambda (x)
                      (insert dir)
                      (eshell-send-input)
                      (when arg
                        (dired dir)))))

;; Inspired by Prot's.
(defun mpereira/eshell-switch-to-last-output-buffer ()
  "Produce a buffer with output of last `eshell' command."
  (interactive)
  (let ((eshell-output (kill-region (eshell-beginning-of-output)
                                    (eshell-end-of-output))))
    (with-current-buffer (get-buffer-create "*last-eshell-output*")
      (erase-buffer)
      ;; TODO do it with `insert' and `delete-region'?
      (yank)
      (switch-to-buffer-other-window (current-buffer)))))

;; Inspired by Prot's.
(defun mpereira/eshell-complete-redirect-to-buffer ()
  "Complete the syntax for appending to a buffer via `eshell'."
  (interactive)
  (end-of-line)
  (insert (concat " >>> #<" (format "%s" (ivy-switch-buffer)) ">")))

;; I don't use `counsel-esh-history' because it doesn't take into consideration
;; the current input.
(defun mpereira/eshell-history ()
  "Browse Eshell history."
  (interactive)
  (let ((history
         (delete-dups
          (mapcar (lambda (str)
                    (string-trim (substring-no-properties str)))
                  (ring-elements eshell-history-ring))))
        (input (let* ((beg (save-excursion (eshell-bol)))
                      (end (save-excursion (end-of-line) (point))))
                 (buffer-substring-no-properties beg end))))
    (ivy-read "Command: "
              history
              :action (lambda (x)
                        (end-of-line)
                        (eshell-kill-input)
                        (insert x))
              :initial-input input)))

;; eshell-mode-map needs to be configured in an `eshell-mode-hook'.
;; https://lists.gnu.org/archive/html/bug-gnu-emacs/2016-02/msg01532.html
(defun mpereira/initialize-eshell ()
  (interactive)
  ;; Completion functions depend on pcomplete.
  ;; Don't use TAB for cycling through candidates.
  (setq pcomplete-cycle-completions nil)
  (setq pcomplete-ignore-case t)

  (eshell/alias "e" "find-file $1")

  ;; Eshell needs this variable set in addition to the PATH environment variable.
  (setq eshell-path-env (getenv "PATH"))

  (general-define-key
   :keymaps '(eshell-mode-map)
   "C-c C-c" 'eshell-interrupt-process)

  (general-define-key
   :states '(normal visual)
   :keymaps '(eshell-mode-map)
   "0" 'eshell-bol
   "C-j" 'eshell-next-prompt
   "C-k" 'eshell-previous-prompt)

  (general-define-key
   :states '(insert)
   :keymaps '(eshell-mode-map)
   ;; Uppercase TAB here doesn't work for some reason.
   ;; Overrides `eshell-pcomplete' because it doesn't work with ivy.
   "<tab>" 'completion-at-point
   ;; TODO: `eshell-{previous,next}-matching-input-from-input' only work with
   ;; prefix inputs, like "git". They don't do fuzzy matching.
   ;;
   ;; TODO: when on an empty prompt and going up and back down (or down and back
   ;; up), make it so that the prompt is empty again instead of cycling back to
   ;; the first input.
   "C-k" 'eshell-previous-matching-input-from-input
   "C-j" 'eshell-next-matching-input-from-input
   "C-/" 'mpereira/eshell-history
   ;; https://github.com/ksonney/spacemacs/commit/297945a45696e235c6983a78acdf05b5f0e015ca
   "C-l" 'mpereira/eshell-clear)

  ;; FIXME: workaround for a bug. When an eshell buffer is created the
  ;; `eshell-mode-map' mappings are not set up, even through `eshell-mode-map'
  ;; is correctly defined. Going to normal state sets them up for some reason.
  (evil-normal-state)
  (evil-insert-state)
  (forward-char))

(add-hook 'eshell-mode-hook 'mpereira/initialize-eshell)

;; Disable a few possibly-global modes.
(add-hook 'eshell-mode-hook (lambda () (company-mode -1)) t)
(add-hook 'eshell-mode-hook (lambda () (undo-tree-mode -1)) t)

(defun mpereira/remote-p ()
  (tramp-tramp-file-p default-directory))

(defun mpereira/remote-user ()
  "Return remote user name."
  (tramp-file-name-user (tramp-dissect-file-name default-directory)))

(defun mpereira/remote-host ()
  "Return remote host."
  ;; `tramp-file-name-real-host' is removed and replaced by
  ;; `tramp-file-name-host' in Emacs 26, see
  ;; https://github.com/kaihaosw/eshell-prompt-extras/issues/18
  (if (fboundp 'tramp-file-name-real-host)
      (tramp-file-name-real-host (tramp-dissect-file-name default-directory))
    (tramp-file-name-host (tramp-dissect-file-name default-directory))))

(defun mpereira/eshell-prompt ()
  (let ((user-name (if (mpereira/remote-p)
                       (mpereira/remote-user)
                     (user-login-name)))
        (host-name (if (mpereira/remote-p)
                       (mpereira/remote-host)
                     (system-name))))
    (concat
     (propertize user-name 'face '(:foreground "green"))
     " "
     (propertize "at" 'face 'eshell-ls-unreadable)
     " "
     (propertize host-name 'face '(:foreground "cyan"))
     " "
     (propertize "in" 'face 'eshell-ls-unreadable)
     " "
     (propertize (mpereira/short-directory-path
                  (eshell/pwd)
                  mpereira/eshell-prompt-max-directory-length)
                 'face 'dired-directory)
     "\n"
     (propertize (if (= (user-uid) 0)
                     "#"
                   "$")
                 'face 'eshell-prompt)
     " ")))

;; Unused (for now?)
(setq mpereira/eshell-prompt-string
      (let ((prompt (mpereira/eshell-prompt))
            (inhibit-read-only t))
        (set-text-properties 0 (length prompt) nil prompt)
        prompt))

(setq eshell-prompt-function 'mpereira/eshell-prompt)
(setq eshell-prompt-regexp "^[$#] ")

;; This causes the prompt to not be protected.
;; (setq eshell-highlight-prompt nil)

;; Make eshell append to history after each command.
;; https://emacs.stackexchange.com/questions/18564/merge-history-from-multiple-eshells
;; (setq eshell-save-history-on-exit nil)
;; (defun eshell-append-history ()
;;   "Call `eshell-write-history' with the `append' parameter set to `t'."
;;   (when eshell-history-ring
;;     (let ((newest-cmd-ring (make-ring 1)))
;;       (ring-insert newest-cmd-ring (car (ring-elements eshell-history-ring)))
;;       (let ((eshell-history-ring newest-cmd-ring))
;;         (eshell-write-history eshell-history-file-name t)))))
;; (add-hook 'eshell-pre-command-hook #'eshell-append-history)

;; Shared history.
;; https://github.com/Ambrevar/dotfiles/blob/25e2ed350b898c3fc2df3148630b5778a3db4ee7/.emacs.d/lisp/init-eshell.el#L205
;; TODO: make this per project.
(defvar mpereira/eshell-history-global-ring nil
  "The history ring shared across Eshell sessions.")

(defun mpereira/eshell-hist-use-global-history ()
  "Make Eshell history shared across different sessions."
  (unless mpereira/eshell-history-global-ring
    (when eshell-history-file-name
      (eshell-read-history nil t))
    (setq mpereira/eshell-history-global-ring
          (or eshell-history-ring (make-ring eshell-history-size))))
  (setq eshell-history-ring mpereira/eshell-history-global-ring))

(add-hook 'eshell-mode-hook #'mpereira/eshell-hist-use-global-history)
#+end_src

** vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :init
  (setq vterm-always-compile-module t))
#+end_src

** term
#+begin_src emacs-lisp :tangle yes
(setq explicit-shell-file-name "bash")

;; Infinite buffer.
(setq term-buffer-maximum-size 0)

;; Emacs 26 has this defaulted to `t', which causes the point to not be movable
;; from the process mark.
(setq term-char-mode-point-at-process-mark nil)

(general-define-key
 :keymaps '(term-raw-map)
 :states '(normal)
 "p" 'term-paste
 "M-x" 'counsel-M-x)

(general-define-key
 :keymaps '(term-raw-map)
 :states '(insert)
 "M-v" 'term-paste)

(general-define-key
 ;; TODO: are both necessary? C-c C-c wasn't working just with `term-raw-map' so
 ;; I added `term-mode-map' and re-evaluated, started working in a term buffer.
 :keymaps '(term-raw-map term-mode-map)
 :prefix "C-c"
 ;; https://github.com/noctuid/general.el
 ;; #how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors
 "" nil
 "C-c" #'term-interrupt-subjob)

;; FIXME: some eshell commands create term buffers. Make those not be killed.
;; Kill term buffers when term process exits.
;; (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
;;   (if (memq (process-status proc) '(signal exit))
;;       (let ((buffer (process-buffer proc)))
;;         ad-do-it
;;         (kill-buffer buffer))
;;     ad-do-it))

;; (ad-activate 'term-sentinel)

(add-hook 'term-mode-hook #'mpereira/hide-trailing-whitespace)
#+end_src

** eterm-256color
#+begin_src emacs-lisp :tangle yes
(use-package eterm-256color
  :config
  (add-hook 'term-mode-hook #'eterm-256color-mode))
#+end_src

** Configure xterm-color
#+begin_src emacs-lisp :tangle yes
(setenv "TERM" "xterm-256color")

(add-hook 'eshell-before-prompt-hook
          (lambda ()
            (setq xterm-color-preserve-properties t)))

(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)

(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color
                                             eshell-output-filter-functions))
#+end_src

** fish-completion
#+begin_src emacs-lisp :tangle yes
;; Doesn't work in eshell buffers.
;; https://github.com/szermatt/emacs-bash-completion/issues/24
(use-package bash-completion
  :config
  (bash-completion-setup))

(use-package fish-completion
  ;; Disabling this for now because it breaks path completion.
  ;; The issue below says that the issue is fixed on recent versions of
  ;; emacs-fish-completion, but it doesn't really seem to be.
  ;; https://gitlab.com/ambrevar/emacs-fish-completion/issues/3.
  :disabled
  :after exec-path-from-shell
  :config
  (if (executable-find "fish")
      (global-fish-completion-mode)
    (message "fish executable not found, not enabling fish-completion-mode"))

  (setq fish-completion-fallback-on-bash-p t)

  ;; WIP: Adds support for showing completion descriptions.
  (defun mpereira/fish-completion-complete (raw-prompt)
    "Complete RAW-PROMPT (any string) using the fish shell.

If `fish-completion-fallback-on-bash-p' is non-nil and if the `bash-completion'
package is available, fall back on bash in case no completion was found with
fish."
    (while
        (pcomplete-here
         (let ((completions
                (let* (;; Keep spaces at the end with OMIT-NULLS=nil in
                       ;; `split-string'.
                       (tokens* (split-string raw-prompt
                                              split-string-default-separators
                                              nil))
                       ;; The first non-empty `car' is the command. Discard
                       ;; leading empty strings.
                       (tokens (progn (while (string= (car tokens*) "")
                                        (setq tokens* (cdr tokens*)))
                                      tokens*))
                       ;; Fish does not support subcommand completion. We make a
                       ;; special case of 'sudo' and 'env' since they are the most
                       ;; common cases involving subcommands. See
                       ;; https://github.com/fish-shell/fish-shell/issues/4093.
                       (prompt (if (not (member (car tokens) '("sudo" "env")))
                                   raw-prompt
                                 (setq tokens (cdr tokens))
                                 (while (and tokens
                                             (or (string-match "^-.*" (car tokens))
                                                 (string-match "=" (car tokens))))
                                   ;; Skip env/sudo parameters, like LC_ALL=C.
                                   (setq tokens (cdr tokens)))
                                 (mapconcat 'identity tokens " "))))
                  ;; Completion result can be a filename. pcomplete expects
                  ;; cannonical file names (i.e. without '~') while fish preserves
                  ;; non-cannonical results. If the result contains a directory,
                  ;; expand it.
                  (split-string
                   (with-output-to-string
                     (with-current-buffer standard-output
                       (call-process fish-completion-command
                                     nil
                                     t
                                     nil
                                     "-c"
                                     (format "complete -C%s"
                                             (shell-quote-argument prompt)))))
                   "\n"
                   t))))
           (if (and fish-completion-fallback-on-bash-p
                    (or (not completions)
                        (file-exists-p (car completions)))
                    (require 'bash-completion nil t))
               ;; Remove trailing spaces of bash completion entries. (Does this
               ;; only occurs when there is 1 completion item?)
               ;; TODO: Maybe this should be fixed in bash-completion instead.
               (mapcar 'string-trim-right
                       (mapcar (lambda (s)
                                 ;; bash-completion inserts "\" to escape white
                                 ;; spaces, we need to remove them since pcomplete
                                 ;; does that too.
                                 (replace-regexp-in-string (regexp-quote "\\") "" s))
                               (nth 2 (bash-completion-dynamic-complete-nocomint
                                       (save-excursion (eshell-bol) (point)) (point)))))
             (if (and completions (file-exists-p (car completions)))
                 (pcomplete-dirs-or-entries)
               (let ((formatted-completions
                      (mapcar
                       (lambda (e)
                         (multiple-value-bind (flag description) (split-string e "\t")
                           ;; Remove trailing spaces to avoid it being converted
                           ;; into "\ ".
                           (string-trim-right
                            (if description
                                (replace-regexp-in-string
                                 (regexp-quote " ")
                                 " "
                                 (format "%-50s %s" flag description))
                              flag))))
                       completions)))
                 formatted-completions))))))))
#+end_src
** load-bash-alias
#+begin_src emacs-lisp :tangle yes
(use-package load-bash-alias
  :config
  (setq load-bash-alias-bashrc-file "~/.aliases"))
#+end_src
* UI
** posframe
Set a default border width and height for all posframe frames via
~mpereira/ivy-posframe-arghandler~.

#+begin_src emacs-lisp :tangle yes
(use-package posframe)
#+end_src

** ivy-posframe
#+begin_src emacs-lisp :tangle yes
(use-package ivy-posframe
  :after (ivy posframe)

  :custom
  (ivy-posframe-height-alist '((t . 20)))
  (ivy-posframe-display-functions-alist '((swiper . ivy-display-function-fallback)
                                          (t . ivy-posframe-display-at-frame-center)))

  :init
  (setq mpereira/ivy-posframe-override-frame-plist '(:internal-border-width 8
                                                     :min-width 150
                                                     :height 0))

  (defun mpereira/ivy-posframe-arghandler (buffer-or-buffer-name arg-name value)
    "Make ivy-posframe frames have a fixed internal border width and height."
    (let (buffer-name
          (ivy-posframe-buffer-name " *ivy-posframe-buffer*"))
      (if (bufferp buffer-or-buffer-name)
          (setq buffer-name (buffer-name buffer-or-buffer-name))
        (setq buffer-name buffer-or-buffer-name))
      (if (string= ivy-posframe-buffer-name buffer-name)
          (or (plist-get mpereira/ivy-posframe-override-frame-plist arg-name) value)
        value)))

  (setq posframe-arghandler #'mpereira/ivy-posframe-arghandler)

  :config
  (ivy-posframe-mode))
#+end_src

** too-long-lines-mode
#+begin_src emacs-lisp :tangle yes
(use-package too-long-lines-mode
  :ensure nil
  :quelpa (too-long-lines-mode
           :fetcher github
           :repo "rakete/too-long-lines-mode")
  :config
  (too-long-lines-mode))
#+end_src

** company-posframe
#+begin_src emacs-lisp :tangle yes
(defun plist-each (function plist)
  "Iterate FUNCTION (a two-argument function) over PLIST."
  (when plist
    (funcall function (car plist) (cadr plist))
    (plist-each function (cddr plist))))

(use-package company-posframe
  :ensure nil
  ;; REVIEW: can this be switched back to the upstream package?
  :quelpa (company-posframe
           :fetcher github
           :branch "overridable-frame-properties"
           :repo "mpereira/company-posframe")
  :after (company posframe ivy-posframe)
  :config
  (setq company-tooltip-align-annotations t)
  (setq company-posframe-show-indicator nil)
  (setq company-posframe-quickhelp-x-offset 0)
  (setq company-posframe-quickhelp-delay 0)
  (setq company-posframe-quickhelp-show-header nil)

  (defun mpereira/update-company-posframe-args ()
    (interactive)
    (setq mpereira/company-posframe-extra-frame-args `())

    (setq mpereira/company-posframe-quickhelp-extra-frame-args
          `(:background-color ,(face-attribute 'ivy-posframe :background nil t)
            :foreground-color ,(face-attribute 'ivy-posframe :foreground nil t)
            :internal-border-width ,ivy-posframe-border-width
            :internal-border-color ,(face-attribute 'ivy-posframe-border
                                                    :background
                                                    nil
                                                    t)))
    (plist-each (lambda (k v)
                  (plist-put company-posframe-show-params k v))
                mpereira/company-posframe-extra-frame-args)
    (plist-each (lambda (k v)
                  (plist-put company-posframe-quickhelp-show-params k v))
                mpereira/company-posframe-quickhelp-extra-frame-args))

  (add-hook 'after-init-hook 'mpereira/update-company-posframe-args)
  (add-hook 'after-load-theme-hook 'mpereira/update-company-posframe-args)

  (company-posframe-mode))
#+end_src

** company-box
This package fixes the positioning of the quickhelp buffers that display next to
the company candidate list window. Without company-box, quickhelp buffers can be
positioned "outside" the frame or on top of the company candidate list window.

#+begin_src emacs-lisp :tangle yes
(use-package company-box
  :after (company)
  :hook (company-mode . company-box-mode)
  :init
  (setq company-box-show-single-candidate t)
  (setq company-box-max-candidates 1000)
  :config
  ;; Make company-box redraw popup on different movements than line up/down.
  ;; https://github.com/sebastiencs/company-box/issues/58#issuecomment-573317553
  (advice-add 'company-next-page :after #'company-box--change-line)
  (advice-add 'company-previous-page :after #'company-box--change-line)
  (advice-add 'company-search-candidates :after #'company-box--change-line)
  (advice-add 'company-filter-candidates :after #'company-box--change-line)
  (advice-add 'company-search-repeat-forward :after #'company-box--change-line)
  (advice-add 'company-search-repeat-backward :after #'company-box--change-line))
#+end_src

** default-text-scale
#+begin_src emacs-lisp :tangle yes
(use-package default-text-scale)
#+end_src

** minibuffer-line
#+begin_src emacs-lisp :tangle yes
(use-package minibuffer-line
  :config
  (setq minibuffer-line-format
        '((:eval
           (let ((time-string (format-time-string "%a %b %d %R")))
             (concat
              (propertize (make-string (- (frame-text-cols)
                                          (string-width time-string))
                                       ?\s)
                          'face 'default)
              time-string)))))
  (minibuffer-line-mode t))
#+end_src

** highlight-indent-guide
#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character))
#+end_src

** hideshow
#+begin_src emacs-lisp :tangle yes
(use-package hideshow
  :config
  (setq hs-isearch-open t)

  (defun mpereira/display-code-line-counts (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (overlay-put ov
                   'display
                   (format " ... [%d]"
                           (count-lines (overlay-start ov)
                                        (overlay-end ov))))))

  (setq hs-set-up-overlay #'mpereira/display-code-line-counts)

  (defun mpereira/hs-toggle-all ()
    "If anything isn't hidden, run `hs-hide-all', else run `hs-show-all'."
    (interactive)
    (let ((starting-ov-count (length (overlays-in (point-min) (point-max)))))
      (hs-hide-all)
      (when (equal (length (overlays-in (point-min) (point-max))) starting-ov-count)
        (hs-show-all))))

  (add-hook 'prog-mode-hook #'hs-minor-mode))
#+end_src

** beacon
#+begin_src emacs-lisp :tangle yes
(use-package beacon
  :config
  (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode)
  (beacon-mode 1)
  (setq beacon-size 40))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :config
  (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode))
#+end_src

** diff-hl
#+begin_src emacs-lisp :tangle yes
(use-package diff-hl
  :config
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t)

  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  (set-face-foreground 'diff-hl-insert "diff-nonexistent")
  (set-face-background 'diff-hl-insert "green4")
  (set-face-foreground 'diff-hl-change "diff-nonexistent")
  (set-face-background 'diff-hl-change "yellow3")
  (set-face-foreground 'diff-hl-delete "diff-nonexistent")
  (set-face-background 'diff-hl-delete "red4"))
#+end_src

** dimmer
#+begin_src emacs-lisp :tangle yes
(use-package dimmer
  :config
  (setq dimmer-fraction 0.5))
#+end_src

** all-the-icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src

** dired-sidebar
#+begin_src emacs-lisp :tangle yes
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** all-the-icons-dired
Run =M-x all-the-icons-install-fonts= after installing.

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons-dired
  :after (all-the-icons dired)
  :commands (all-the-icons-dired-mode)
  :config
  (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))
#+end_src

** emojify
Not enabled globally by default for now.

#+begin_src emacs-lisp :tangle yes
(use-package emojify)
#+end_src

** ivy-rich
REVIEW: waiting for https://github.com/Yevgnen/ivy-rich/pull/84 to be merged to
revert back from the quelpa setup.

#+begin_src emacs-lisp :tangle yes
(use-package ivy-rich
  :ensure nil
  :quelpa (ivy-rich
           :fetcher github
           :branch "ivy-display-transformers-alist-fix"
           :repo "mpereira/ivy-rich")
  :after ivy
  :init
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

*** Run ~ivy-rich-mode~ only after loading ~all-the-icons-ivy-rich~
#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :after (ivy-rich all-the-icons-ivy-rich)
  :config
  ;; Toggle `ivy-rich-mode' after modifying `ivy-rich-display-transformers-list'.
  (setq ivy-rich-display-transformers-list
        `(ivy-switch-buffer
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-switch-buffer-transformer
                      (:width 0.2))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.2))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          ivy-switch-buffer-other-window
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-rich-candidate
                      (:width 30))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda
                                (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.3))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          counsel-switch-buffer
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-rich-candidate
                      (:width 30))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda
                                (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.3))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          counsel-projectile-switch-to-buffer
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-rich-candidate
                      (:width 30))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda
                                (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.3))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          counsel-switch-buffer-other-window
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-rich-candidate
                      (:width 30))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda
                                (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.3))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          package-install
          (:columns ((ivy-rich-candidate (:width 30))
                     (ivy-rich-package-version (:width 16 :face font-lock-comment-face)) ; package version
                     (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face)) ; archive summary
                     (ivy-rich-package-install-summary (:face font-lock-doc-face)))) ; package description
          persp-switch-to-buffer
          (:columns ((all-the-icons-ivy-rich-buffer-icon)
                     (ivy-rich-candidate
                      (:width 30))
                     (ivy-rich-switch-buffer-size
                      (:width 7))
                     (ivy-rich-switch-buffer-indicators
                      (:width 4 :face error :align right))
                     (ivy-rich-switch-buffer-major-mode
                      (:width 12 :face warning))
                     (ivy-rich-switch-buffer-project
                      (:width 15 :face success))
                     (ivy-rich-switch-buffer-path
                      (:width (lambda
                                (x)
                                (ivy-rich-switch-buffer-shorten-path
                                 x (ivy-rich-minibuffer-width 0.3))))))
           :predicate (lambda
                        (cand)
                        (get-buffer cand))
           :delimiter "	")
          counsel-M-x
          (:columns ((all-the-icons-ivy-rich-function-icon)
                     (counsel-M-x-transformer
                      (:width 50))
                     (ivy-rich-counsel-function-docstring
                      (:face font-lock-doc-face))))
          counsel-describe-function
          (:columns ((all-the-icons-ivy-rich-function-icon)
                     (counsel-describe-function-transformer
                      (:width 50))
                     (ivy-rich-counsel-function-docstring
                      (:face font-lock-doc-face))))
          counsel-describe-variable
          (:columns ((all-the-icons-ivy-rich-variable-icon)
                     (counsel-describe-variable-transformer
                      (:width 50))
                     (ivy-rich-counsel-variable-docstring
                      (:face font-lock-doc-face))))
          counsel-set-variable
          (:columns ((all-the-icons-ivy-rich-variable-icon)
                     (counsel-describe-variable-transformer
                      (:width 50))
                     (ivy-rich-counsel-variable-docstring
                      (:face font-lock-doc-face))))
          counsel-apropos
          (:columns ((all-the-icons-ivy-rich-symbol-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-info-lookup-symbol
          (:columns ((all-the-icons-ivy-rich-symbol-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-descbinds
          (:columns ((all-the-icons-ivy-rich-keybinding-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-find-file
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-read-file-transformer))
           :delimiter "	")
          counsel-file-jump
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-dired
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-read-file-transformer))
           :delimiter "	")
          counsel-dired-jump
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-el
          (:columns ((all-the-icons-ivy-rich-symbol-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-fzf
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-git
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-recentf
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate
                      (:width 0.2))
                     (ivy-rich-file-last-modified-time
                      (:face font-lock-comment-face)))
           :delimiter "	")
          counsel-buffer-or-recentf
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (counsel-buffer-or-recentf-transformer
                      (:width 0.2))
                     (ivy-rich-file-last-modified-time
                      (:face font-lock-comment-face)))
           :delimiter "	")
          counsel-bookmark
          (:columns ((ivy-rich-bookmark-type)
                     (all-the-icons-ivy-rich-bookmark-name
                      (:width 40))
                     (ivy-rich-bookmark-info))
           :delimiter "	")
          counsel-bookmarked-directory
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-package
          (:columns ((all-the-icons-ivy-rich-package-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-fonts
          (:columns ((all-the-icons-ivy-rich-font-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-major
          (:columns ((all-the-icons-ivy-rich-function-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-find-library
          (:columns ((all-the-icons-ivy-rich-library-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-load-library
          (:columns ((all-the-icons-ivy-rich-library-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-load-theme
          (:columns ((all-the-icons-ivy-rich-theme-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-world-clock
          (:columns ((all-the-icons-ivy-rich-world-clock-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-tramp
          (:columns ((all-the-icons-ivy-rich-tramp-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-git-checkout
          (:columns ((all-the-icons-ivy-rich-git-branch-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-list-processes
          (:columns ((all-the-icons-ivy-rich-process-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-projectile-switch-project
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          projectile-persp-switch-project
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-projectile-find-file
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (counsel-projectile-find-file-transformer))
           :delimiter "	")
          counsel-projectile-find-dir
          (:columns ((all-the-icons-ivy-rich-project-icon)
                     (counsel-projectile-find-dir-transformer))
           :delimiter "	")
          counsel-minor
          (:columns ((all-the-icons-ivy-rich-mode-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          counsel-imenu
          (:columns ((all-the-icons-ivy-rich-imenu-icon)
                     (ivy-rich-candidate))
           :delimiter "	")
          treemacs-projectile
          (:columns ((all-the-icons-ivy-rich-file-icon)
                     (ivy-rich-candidate))
           :delimiter "	")))
  (ivy-rich-mode 1))
#+end_src

** all-the-icons-ivy-rich
- [2020-05-22 Fri]: I couldn't run Emacs from a clean install today due to
  [[https://github.com/seagle0128/all-the-icons-ivy-rich/issues/11][all-the-icons-ivy-rich/issues/11]]. Disabled for now.
- [2020-05-27 Wed]: I opened a [[https://github.com/Yevgnen/ivy-rich/pull/84][PR upstream]] and set up my ivy-rich fork.
  Re-enabled.

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons-ivy-rich
  :after (ivy-rich all-the-icons)
  :init
  ;; For some reason, if the icon size is 1 their widths are different.
  ;; https://github.com/seagle0128/all-the-icons-ivy-rich/issues/7
  ;;
  ;; Also, setting a size bigger than 0.7 seems to cause candidates in the
  ;; bottom to not appear in the frame.
  (setq all-the-icons-ivy-rich-icon-size 0.7)
  :config
  (all-the-icons-ivy-rich-mode 1))
#+end_src

* Movement
** bm
#+begin_src emacs-lisp :tangle yes
(use-package bm)
#+end_src

** avy
#+begin_src emacs-lisp :tangle yes
(use-package avy
  :config
  (setq avy-all-windows nil))
#+end_src

** goto-address-mode
#+begin_src emacs-lisp :tangle yes
(general-define-key
 :keymaps '(goto-address-highlight-keymap)
 "C-c C-o" #'goto-address-at-point)

(add-hook 'prog-mode-hook #'goto-address-prog-mode)
#+end_src

** dumb-jump
#+begin_src emacs-lisp :tangle yes
(use-package dumb-jump
  :config
  (setq dumb-jump-selector 'ivy)

  (general-define-key
   :states '(normal visual)
   "C-]" 'dumb-jump-go
   "C-}" 'dumb-jump-quick-look))
#+end_src

** frog-jump-buffer
#+begin_src emacs-lisp :tangle yes
(use-package frog-jump-buffer
  :ensure nil
  :quelpa (frog-jump-buffer
           :fetcher github
           :repo "waymondo/frog-jump-buffer"))
#+end_src

** link-hint
#+begin_src emacs-lisp :tangle yes
(use-package link-hint
  :general (:keymaps '(global-map)
            :states '(normal visual)
            :prefix mpereira/leader
            "F" #'link-hint-open-link
            "C" #'link-hint-copy-link))
#+end_src


* Text search and manipulation
** swiper
#+begin_src emacs-lisp :tangle yes
(use-package swiper
  :custom
  (swiper-action-recenter t))
#+end_src

** ripgrep
#+begin_src emacs-lisp :tangle yes
(use-package rg
  :general (:keymaps '(rg-mode-map)
            :states '(normal visual)
            "<" 'rg-back-history
            ">" 'rg-forward-history
            "C-j" 'rg-next-file
            "C-k" 'rg-prev-file
            "G" 'evil-goto-line
            "gg" 'evil-goto-first-line
            "gr" 'rg-recompile)
  :config
  (setq rg-group-result t))
#+end_src

** wgrep
#+begin_src emacs-lisp :tangle yes
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t))
#+end_src

** double-saber
#+begin_src emacs-lisp :tangle yes
(use-package double-saber
  :after (rg ivy)
  :general (:keymaps '(double-saber-mode-map)
            :states '(normal visual)
            "C-r" 'double-saber-redo
            "u" 'double-saber-undo
            "D" 'double-saber-delete
            "F" 'double-saber-narrow
            "T" '(lambda ()
                   (interactive)
                   (setq rg-group-result (not rg-group-result))
                   (rg-rerun))
            "S" 'double-saber-sort-lines)
  :hook ((rg-mode . (lambda ()
                      (double-saber-mode)
                      (setq-local double-saber-start-line 6)
                      (setq-local double-saber-end-text "rg finished")))
         (grep-mode . (lambda ()
                        (double-saber-mode)
                        (setq-local double-saber-start-line 5)
                        (setq-local double-saber-end-text "Grep finished")))
         (ivy-occur-grep-mode . (lambda ()
                                  (double-saber-mode)
                                  (setq-local double-saber-start-line 5)))))
#+end_src

** symbol-overlay
#+begin_src emacs-lisp :tangle yes
(use-package symbol-overlay)

;; TODO: consider binding "*" to `symbol-overlay-put'?
#+end_src

** expand-region
#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :config
  (general-define-key
   :states '(normal visual)
   "+" 'er/expand-region))
#+end_src

** ialign
#+begin_src emacs-lisp :tangle yes
(use-package ialign)
#+end_src

** yasnippet
I can't get this to plan nice with `company-mode`, so I'm disabling it.

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :disabled
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src

** yasnippet-snippets
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets
  :disabled
  :after yasnippet)
#+end_src

** Add yasnippet support for all company backends
Got this from [[https://github.com/syl20bnr/spacemacs/pull/179][here]].

Not tangled.
#+begin_src emacs-lisp :tangle no
(defvar mpereira/company-mode-enable-yas t
  "Enable yasnippet for all backends.")

(defun mpereira/company-mode-add-yas-backend (backend)
  (if (or (not mpereira/company-mode-enable-yas)
          (and (listp backend)
               (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapcar #'mpereira/company-mode-add-yas-backend
                               company-backends))
#+end_src

** electric-pair-mode
Automatically close brackets, parens, etc. Bundled with Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package elec-pair
  :config
  (electric-pair-mode 1)

  ;; Don't auto close brackets in org mode so that it doesn't conflict the `<s'
  ;; expansion snippet provided by `org-tempo'.
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local electric-pair-inhibit-predicate
                          `(lambda (c)
                             (if (char-equal c ?<)
                                 t (,electric-pair-inhibit-predicate c)))))))
#+end_src

** undo-tree
#+begin_src emacs-lisp :tangle yes
(dolist (hook '(undo-tree-mode-hook
                undo-tree-visualizer-mode-hook))
  (add-hook hook 'mpereira/hide-trailing-whitespace))

(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
(setq undo-limit (* 100 1024 1024)) ;; 100MB.
(setq undo-strong-limit undo-limit)
(setq undo-tree-visualizer-timestamps t)
(setq undo-tree-visualizer-diff t)

(global-undo-tree-mode 1)

(defun undo-tree-visualizer-show-diff (&optional node)
  (setq undo-tree-visualizer-diff t)
  (let ((diff-buffer (with-current-buffer undo-tree-visualizer-parent-buffer
		                   (undo-tree-diff node)))
	      (display-buffer-mark-dedicated 'soft))
    (display-buffer diff-buffer)))

(defun undo-tree-visualizer-hide-diff ()
  (setq undo-tree-visualizer-diff nil)
  (when-let ((diff-buffer-window (get-buffer-window undo-tree-diff-buffer-name)))
    (with-selected-window diff-buffer-window
      (kill-buffer-and-window))))

(defun undo-tree-visualizer-update-diff (&optional node)
  (with-current-buffer undo-tree-visualizer-parent-buffer
    (undo-tree-diff node)))
#+end_src

** move-text
#+begin_src emacs-lisp :tangle yes
(use-package move-text)
#+end_src

** unfill
#+begin_src emacs-lisp :tangle yes
(use-package unfill
  :config
  (general-define-key
   :keymaps '(global-map)
   "M-q" 'unfill-toggle))
#+end_src

** string-inflection
#+begin_src emacs-lisp :tangle yes
(use-package string-inflection)
#+end_src

** format-all
#+begin_src emacs-lisp :tangle yes
(use-package format-all
  :config
  ;; (define-format-all-formatter mpereira/sh-formatter
  ;;   (:executable "shfmt")
  ;;   (:install (macos ""))
  ;;   (:modes sh-mode)
  ;;   (:format (format-all--buffer-easy
  ;;             executable
  ;;             "-sr"
  ;;             "-i" "2"
  ;;             "-ln" (cl-case (and (boundp 'sh-shell) (symbol-value 'sh-shell))
  ;;                     (bash "bash")
  ;;                     (mksh "mksh")
  ;;                     (t "posix")))))

  ;; (define-format-all-formatter mpereira/yaml-formatter
  ;;   (:executable "prettier")
  ;;   (:install (macos ""))
  ;;   (:modes yaml-mode)
  ;;   (:format (format-all--buffer-easy executable "--parser" "yaml")))

  (defconst format-all--system-type
    (cl-case system-type
      (windows-nt 'windows)
      (cygwin     'windows)
      (darwin     'macos)
      (gnu/linux  'linux)
      (berkeley-unix
       (save-match-data
         (let ((case-fold-search t))
           (cond ((string-match "freebsd" system-configuration) 'freebsd)
                 ((string-match "openbsd" system-configuration) 'openbsd)
                 ((string-match "netbsd"  system-configuration) 'netbsd))))))
    "Current operating system according to the format-all package.")

  (defun format-all--resolve-system (choices)
    "Get first choice matching `format-all--system-type' from CHOICES."
    (cl-dolist (choice choices)
      (cond ((atom choice)
             (cl-return choice))
            ((eql format-all--system-type (car choice))
             (cl-return (cadr choice))))))

  ;; (define-format-all-formatter mpereira/clang-formatter
  ;;   (:executable "clang-format")
  ;;   (:install (macos ""))
  ;;   (:modes java-mode)
  ;;   (:format (format-all--buffer-easy "clang-format" "-style" "chromium")))
  )
#+end_src

** blacken
#+begin_src emacs-lisp :tangle yes
(use-package blacken
  :config
  ;; Use a `blacken-buffer' that doesn't randomly move the point to the
  ;; beginning of the buffer.
  ;; https://github.com/pythonic-emacs/blacken/pull/19/files
  (defun mpereira/blacken-buffer (&optional display)
    "Try to blacken the current buffer.
Show black output, if black exit abnormally and DISPLAY is t."
    (interactive (list t))
    (let* ((original-buffer (current-buffer))
           (tmpbuf (get-buffer-create "*blacken*"))
           (errbuf (get-buffer-create "*blacken-error*")))
      ;; This buffer can be left after previous black invocation.  It
      ;; can contain error message of the previous run.
      (dolist (buf (list tmpbuf errbuf))
        (with-current-buffer buf
          (erase-buffer)))
      (condition-case err
          (if (not (zerop (blacken-call-bin original-buffer tmpbuf errbuf)))
              (error "Black failed, see %s buffer for details" (buffer-name errbuf))
            (unless (eq (compare-buffer-substrings tmpbuf nil nil original-buffer nil nil) 0)
              (with-current-buffer original-buffer (replace-buffer-contents tmpbuf)))
            (mapc 'kill-buffer (list tmpbuf errbuf)))
        (error (message "%s" (error-message-string err))
               (when display
                 (pop-to-buffer errbuf))))))

  (general-define-key
   :keymaps '(python-mode-map)
   :states '(normal visual)
   :prefix mpereira/leader
   "F" 'mpereira/blacken-buffer)

  (setq blacken-line-length 'fill))
#+end_src

** prettier
#+begin_src emacs-lisp :tangle yes
(use-package prettier-js
  :config
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode))
#+end_src

* git
** magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :config
  (add-hook 'with-editor-mode-hook 'evil-insert-state)

  (setq magit-diff-refine-hunk t)
  (setq magit-prefer-remote-upstream t)
  (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
  ;; FIXME: not working?
  ;; https://github.com/magit/magit/issues/2872#issuecomment-291011191
  (setq magit-list-refs-sortby "-creatordate")

  (setq magit-blame-styles '((headings
                              (heading-format . "%-20a %C %s\n"))
                             (margin
                              (margin-format " %s%f" " %C %a" " %H")
                              (margin-width . 60)
                              (margin-face . magit-blame-margin)
                              (margin-body-face magit-blame-dimmed))))

  (transient-bind-q-to-quit)

  ;; "q" is being bound to `quit-window' on the magit status buffer, for some
  ;; reason. It doesn't seem to be coming from transient.
  (general-define-key
   :keymaps '(magit-status-mode-map)
   :states '(normal visual)
   "q" #'magit-mode-bury-buffer)

  (general-define-key
   :keymaps '(magit-mode-map)
   :states '(normal visual)
   "<" #'magit-go-backward
   ">" #'magit-go-forward
   "zb" #'evil-scroll-line-to-bottom
   "zt" #'evil-scroll-line-to-top
   "zz" #'evil-scroll-line-to-center)

  ;; This makes magit slow when there are a lot of buffers. See:
  ;; https://github.com/magit/magit/issues/2687#issuecomment-224845496
  (add-hook 'magit-update-uncommitted-buffer-hook 'vc-refresh-state))
#+end_src

** forge
Sometimes I have trouble pulling topics/notifications through forge. I just
([2019-03-18 Mon]) did something that fixed it:
1. Removed related forge GitHub [[https://github.com/settings/tokens][personal access token]]
2. Disabled =ghub-use-workaround-for-emacs-bug=
3. Tried again

Step #2 seems to have caused that GitHub authentication is done through 2-factor
instead of credentials.

I still sometimes see "502 Bad gateway /graphql" errors when trying to pull
repositories, but it seems like just trying again a few times gets it done.

#+begin_src emacs-lisp :tangle yes
(use-package forge
  :after (ghub magit)
  :init
  (setq ghub-use-workaround-for-emacs-bug nil)

  (general-define-key
   :keymaps '(forge-post-mode-map
              forge-topic-mode-map
              forge-post-section-map
              forge-issue-section-map
              forge-issues-section-map
              forge-pullreq-section-map
              forge-topic-list-mode-map
              forge-issue-list-mode-map
              forge-pullreqs-section-map
              forge-pullreq-list-mode-map
              forge-forge-repo-section-map
              forge-notifications-mode-map
              forge-topic-state-section-map
              forge-topic-marks-section-map
              forge-topic-title-section-map
              forge-repository-list-mode-map
              forge-topic-labels-section-map
              forge-topic-assignees-section-map
              forge-topic-review-requests-section-map)
   :states '(normal visual)
   :prefix mpereira/leader
   "go" 'forge-browse-dwim)

  (general-define-key
   :keymaps '(forge-topic-mode-map
              forge-topic-list-mode-map
              forge-topic-state-section-map
              forge-topic-marks-section-map
              forge-topic-title-section-map)
   :states '(normal visual)
   :prefix mpereira/leader
   "go" 'forge-browse-topic)

  (general-define-key
   :keymaps '(forge-post-mode-map
              forge-post-section-map
              forge-topic-list-mode-map
              forge-topic-state-section-map
              forge-topic-marks-section-map
              forge-topic-title-section-map)
   :states '(normal visual)
   :prefix mpereira/leader
   "go" 'forge-browse-post))
#+end_src

** magit-todos
#+begin_src emacs-lisp :tangle yes
(use-package magit-todos
  ;; Disabled on 2020-05-05.
  :disabled
  :ensure nil
  :quelpa (magit-todos
           :fetcher github
           :repo "alphapapa/magit-todos")
  :after (magit ivy)
  :config
  ;; Only show magit-todos on non-TRAMP magit status buffers.
  (add-hook 'magit-status-mode-hook
            (lambda ()
              (when (not (ivy--remote-buffer-p (current-buffer)))
                (let ((magit-todos-mode t))
                  (magit-todos-update))))))
#+end_src

** gist
#+begin_src emacs-lisp :tangle yes
(use-package gist
  :config
  (general-define-key
   :states '(normal visual)
   :prefix mpereira/leader
   :infix "gi"
   "p" 'gist-region-or-buffer-private
   "i" 'gist-region-or-buffer
   "l" 'gist-list)

  (general-define-key
   :keymaps '(gist-list-menu-mode-map)
   "g" nil
   "k" nil)

  ;; TODO: can we use `(evil-set-initial-state 'gist-list-menu-mode 'normal)`
  ;; instead of most of the mappings below?
  (general-define-key
   :keymaps '(gist-list-menu-mode-map)
   "C-j" 'next-line
   "C-k" 'previous-line
   "j" 'next-line
   "k" 'previous-line
   "C-f" 'scroll-up-command
   "C-b" 'scroll-down-command
   "r" 'gist-list-reload
   "gg" 'beginning-of-buffer
   "G" 'end-of-buffer
   "/" 'evil-search-forward
   "n" 'evil-search-next
   "N" 'evil-search-previous
   "X" 'gist-kill-current))
#+end_src

** gitignore-mode
#+begin_src emacs-lisp :tangle yes
(use-package gitignore-mode)
#+end_src

** git-timemachine
#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine)
#+end_src

** browse-at-remote
#+begin_src emacs-lisp :tangle yes
(use-package browse-at-remote
  :ensure nil
  ;; FIXME: revert to official Melpa package when my PR gets merged:
  ;; https://github.com/rmuslimov/browse-at-remote/pull/59
  :quelpa (browse-at-remote
           :fetcher github
           :repo "mpereira/browse-at-remote"
           :branch "patch-1")
  :config
  ;; Permanent SHA link.
  (setq browse-at-remote-prefer-symbolic nil)

  ;; Browse file with no lines if no lines are selected.
  (setq browse-at-remote-add-line-number-if-no-region-selected nil)

  (defun mpereira/browse-at-remote ()
    "TODO: docstring."
    (interactive)
    (let ((url (browse-at-remote-get-url)))
      (kill-new url)
      (browse-url url))))
#+end_src

* Software development
** Flycheck
*** flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :config
  (general-define-key
   :keymaps '(flycheck-mode-map)
   :states '(normal visual)
   :prefix mpereira/leader
   :infix "1"
   "c" 'flycheck-buffer
   "e" 'flycheck-explain-error-at-point
   "h" 'flycheck-display-error-at-point
   "j" 'flycheck-next-error
   "k" 'flycheck-previous-error
   "l" 'flycheck-list-errors
   "n" 'flycheck-next-error
   "p" 'flycheck-previous-error
   "y" 'flycheck-copy-errors-as-kill)

  (setq flycheck-display-errors-delay 0.3)

  (add-hook 'prog-mode-hook #'flycheck-mode)

  (defun mpereira/disable-emacs-lisp-checkdoc-checker ()
    "TODO: docstring."
    (interactive)
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook #'mpereira/disable-emacs-lisp-checkdoc-checker))
#+end_src

*** flycheck-posframe
Disabling on [2020-05-23 Sat] it for LSP.

#+begin_src emacs-lisp :tangle yes
(use-package flycheck-posframe
  :disabled
  :after flycheck
  :config
  (flycheck-posframe-configure-pretty-defaults)
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
#+end_src

** LSP
Install some dependencies:

#+begin_src bash :tangle setup.sh :results verbatim
rustup component add rustfmt
#+end_src

#+begin_src bash :tangle setup.sh :results verbatim
curl https://github.com/snoe/clojure-lsp/releases/download/release-20200514T134144/clojure-lsp \
     -L  \
     -o /usr/local/bin/clojure-lsp
chmod 755 /usr/local/bin/clojure-lsp
#+end_src

*** lsp-mode
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :config
  (setq lsp-rust-server 'rust-analyzer)

  (add-hook 'python-mode-hook 'lsp)
  (add-hook 'js2-mode-hook 'lsp)
  (add-hook 'rust-mode-hook 'lsp)
  (add-hook 'clojure-mode-hook 'lsp)

  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-ui-doc-delay 0)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-update-mode 'line)

  (general-define-key
   :keymaps '(lsp-mode-map)
   :states '(normal)
   "C-9" 'lsp-ui-doc-glance
   "K" 'lsp-describe-thing-at-point)

  (general-define-key
   :keymaps '(lsp-mode-map)
   :states '(normal)
   :prefix "g"
   "d" 'lsp-find-definition
   "e" 'lsp-ui-peek-find-references
   "a" 'lsp-execute-code-action)

  ;; REVIEW: fix for lsp-ui-sideline not aligning correctly to the right side.
  ;; https://github.com/emacs-lsp/lsp-ui/issues/285#issuecomment-493092398
  (custom-set-faces
   '(markdown-code-face ((t (:inherit consolas)))))

  (general-define-key
   :keymaps '(rust-mode-map)
   :states '(normal)
   :prefix "g"
   "r" 'lsp-rust-analyzer-rerun
   "R" 'lsp-rust-analyzer-run)

  (general-define-key
   :keymaps '(lsp-mode-map)
   :states '(normal visual)
   :prefix mpereira/leader
   "F" 'lsp-format-buffer)

  (general-define-key
   :keymaps '(lsp-ui-peek-mode-map)
   "C-j" 'lsp-ui-peek--select-next
   "C-k" 'lsp-ui-peek--select-prev)

  ;; (setq-default lsp-ui-doc-frame-parameters
  ;;               '((left . -1)
  ;;                 (no-focus-on-map . t)
  ;;                 (min-width  . 0.3)
  ;;                 (width  . 0)
  ;;                 (min-height  . 0)
  ;;                 (height  . 0)
  ;;                 (internal-border-width . 1)
  ;;                 (vertical-scroll-bars . nil)
  ;;                 (horizontal-scroll-bars . nil)
  ;;                 (right-fringe . 0)
  ;;                 (menu-bar-lines . 0)
  ;;                 (tool-bar-lines . 0)
  ;;                 (line-spacing . 0)
  ;;                 (unsplittable . t)
  ;;                 (undecorated . t)
  ;;                 (top . -1)
  ;;                 (visibility . nil)
  ;;                 (mouse-wheel-frame . nil)
  ;;                 (no-other-frame . t)
  ;;                 (inhibit-double-buffering . t)
  ;;                 (drag-internal-border . t)
  ;;                 (no-special-glyphs . t)
  ;;                 (desktop-dont-save . t)))
  )
#+end_src

*** lsp-python-ms
#+begin_src emacs-lisp :tangle yes
(use-package lsp-python-ms
  :after lsp
  :init
  (setq lsp-python-ms-auto-install-server t)
  (setq lsp-python-ms-python-executable-cmd "python3")
  :config
  (require 'lsp-pyls)
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection (car lsp-pyls-server-command))
                    :major-modes '(python-mode)
                    :remote? t
                    :server-id 'pyls-remote))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection lsp-python-ms-executable)
                    :major-modes '(python-mode)
                    :remote? t
                    :server-id 'python-ms-remote)))
#+end_src

*** lsp-ui
#+begin_src emacs-lisp :tangle yes
(use-package lsp-ui
  :init
  ;; REVIEW: as of [2020-05-26], the WebKit tooltip doesn't look good and can't
  ;; seem to be configurable.
  (setq lsp-ui-doc-use-webkit nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src

*** company-lsp
#+begin_src emacs-lisp :tangle yes
(use-package company-lsp
  :after lsp
  :config
  (push 'company-lsp company-backends))
#+end_src

** company-mode
#+begin_src emacs-lisp :tangle yes
(use-package company
  :config
  (setq company-global-modes '(not eshell-mode
                                   comint-mode
                                   message-mode
                                   help-mode))

  (add-hook 'after-init-hook 'global-company-mode)

  (setq company-require-match 'never)
  (setq company-idle-delay nil)
  (setq company-transformers '(company-sort-by-backend-importance))
  (setq company-frontends '(;; Show tooltip even for single candidate.
                            company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))


  (general-define-key
   :states '(insert)
   "TAB" 'company-complete
   "<backtab>" 'counsel-company)

  (general-define-key
   :keymaps '(company-search-map)
   "ESC" 'company-search-abort
   "TAB" 'company-search-abort)

  (general-define-key
   :keymaps '(company-active-map company-posframe-active-map)
   "C-b" 'company-previous-page
   "C-f" 'company-next-page
   "C-j" 'company-select-next
   "C-k" 'company-select-previous
   "ESC" 'company-abort
   "RET" 'company-complete-selection
   "TAB" 'company-abort))
#+end_src

** aggressive-indent
#+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :config
  (add-to-list 'aggressive-indent-excluded-modes 'sql-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'makefile-bsdmake-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'python-mode)
  (add-hook 'prog-mode-hook #'mpereira/maybe-enable-aggressive-indent-mode))
#+end_src

** LISP
*** lispy
#+begin_src emacs-lisp :tangle yes
(use-package lispy
  :config
  (add-hook 'emacs-lisp-mode-hook 'lispy-mode)
  (add-hook 'clojure-mode-hook 'lispy-mode)

  ;; semantic-mode is disabled by lispy for $reasons. Sometimes it fails to also
  ;; disable this timer, which keeps printing the following error message in the
  ;; echo area:
  ;;
  ;; Error running timer `semantic-idle-scheduler-function'
  ;; (error "Unmatched Text during Lexical Analysis")
  ;;
  ;; So here we disable the timer manually. Check
  ;; https://github.com/abo-abo/lispy/issues/473 for more context.
  (advice-add 'semantic-idle-scheduler-function :around #'ignore)

  ;; Disable most lispy mappings.
  (setq lispy-mode-map lispy-mode-map-base)
  (setcdr (assq 'lispy-mode minor-mode-map-alist)
          lispy-mode-map)

  ;; `lispy-fill' doesn't handle filling comments really well. Override it.
  (general-define-key
   :keymaps 'lispy-mode-map
   "M-q" 'unfill-toggle)

  (general-define-key
   :keymaps 'lispy-mode-map
   :states '(insert)
   "<backspace>" 'lispy-delete-backward
   "<deletechar>" 'lispy-delete
   ")" 'lispy-right-nostring
   "\"" 'lispy-doublequote
   "[" 'lispy-brackets
   "]" 'lispy-close-square
   "{" 'lispy-braces
   "}" 'lispy-close-curly)

  (general-define-key
   :keymaps 'lispy-mode-map
   :states '(normal)
   :prefix mpereira/leader
   "fo" 'mpereira/lispy-goto-local
   "fO" 'lispy-goto-projectile
   "r" 'lispy-raise-sexp
   "R" 'lispy-raise-some
   "(" 'lispy-wrap-round
   "[" 'lispy-wrap-brackets
   "{" 'lispy-wrap-braces
   "c" 'lispy-clone))
#+end_src

*** lispyville
#+begin_src emacs-lisp :tangle yes
(use-package lispyville
  :after (evil lispy)
  :config
  (add-hook 'lispy-mode-hook 'lispyville-mode)

  (lispyville-set-key-theme '(operators))

  (general-define-key
   :keymaps '(lispyville-mode-map)
   :states '(insert)
   "ESC" 'lispyville-normal-state)

  (general-define-key
   :keymaps '(lispyville-mode-map)
   :states '(normal visual)
   "W" 'mpereira/forward-sexp-begin
   "B" 'mpereira/backward-sexp-begin
   "E" 'mpereira/forward-sexp-end
   "(" 'lispyville-backward-up-list
   ")" 'lispyville-up-list
   "C-(" 'lispyville-beginning-of-defun
   "C-)" 'lispyville-end-of-defun
   "{" 'lispy-knight-up
   "}" 'lispy-knight-down)

  (general-define-key
   :keymaps '(lispyville-mode-map)
   :states '(normal)
   "S" 'lispyville-change-whole-line
   "gA" 'mpereira/append-to-end-of-list
   "gI" 'mpereira/insert-to-beginning-of-list
   "go" 'lispy-oneline
   "gm" 'lispy-multiline
   "gs" 'lispy-stringify
   "gS" 'lispy-unstringify
   "gt" 'lispy-teleport
   ">)" 'lispy-forward-slurp-sexp
   "<)" 'lispy-forward-barf-sexp
   "<(" 'lispy-backward-slurp-sexp
   ">(" 'lispy-backward-barf-sexp
   "|" 'lispy-split
   "_" 'lispy-join
   "<f" 'lispyville-drag-backward
   ">f" 'lispyville-drag-forward
   "C-9" 'lispy-describe-inline
   "C-0" 'lispy-arglist-inline))
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp :tangle yes
(use-package eros
  :config
  (eros-mode 1))

(general-define-key
 :keymaps '(emacs-lisp-mode-map)
 :states '(normal)
 :prefix mpereira/leader
 :infix "e"
 "d" #'edebug-defun
 "e" #'mpereira/eval-thing-at-or-around-point
 "(" #'eval-defun
 "E" #'eval-buffer)

(general-define-key
 :keymaps '(emacs-lisp-mode-map)
 :states '(visual)
 :prefix mpereira/leader
 :infix "e"
 "e" 'eval-region)

(general-define-key
 :keymaps '(emacs-lisp-mode-map)
 :states '(normal)
 "C-]" 'xref-find-definitions-other-window
 "K" 'helpful-at-point)
#+end_src

** Java
#+begin_src emacs-lisp :tangle yes
(add-hook 'java-mode-hook
          (lambda ()
            (setq-local whitespace-line-column mpereira/fill-column-wide)
            (setq-local fill-column mpereira/fill-column-wide)
            (setq-local comment-column mpereira/fill-column-wide)))
#+end_src

*** meghanada
#+begin_src emacs-lisp :tangle yes
(use-package meghanada
  :config
  ;; (add-hook 'java-mode-hook
  ;;           (lambda ()
  ;;             (meghanada-mode t)
  ;;             (setq c-basic-offset 4)
  ;;             (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
  )
#+end_src

** Clojure
*** clojure-mode
#+begin_src emacs-lisp :tangle yes
(use-package clojure-mode
  :config
  ;; aggressive-indent-mode is too slow for editing Clojure.
  (add-to-list 'aggressive-indent-excluded-modes 'clojure-mode))
#+end_src

*** clj-refactor
#+begin_src emacs-lisp :tangle yes
(use-package clj-refactor
  :config
  (setq cljr-hotload-dependencies t))
#+end_src

*** inf-clojure
#+begin_src emacs-lisp :tangle yes
(use-package inf-clojure)
#+end_src

*** cider
#+begin_src emacs-lisp :tangle yes
(use-package cider
  :config
  (setq cider-prompt-for-symbol nil)
  (setq cider-repl-display-help-banner nil)

  (general-define-key
   :keymaps 'cider-mode-map
   :states '(normal visual)
   "K" 'cider-doc
   "gf" 'cider-find-var)

  (defun mpereira/cider-eval-sexp-at-point (&optional output-to-current-buffer)
    "Evaluate the expression around point.
If invoked with OUTPUT-TO-CURRENT-BUFFER, output the result to current buffer."
    (interactive "P")
    (save-excursion
      (goto-char (- (cadr (cider-sexp-at-point 'bounds))
                    1))
      (cider-eval-last-sexp output-to-current-buffer)))

  (general-define-key
   :keymaps 'cider-mode-map
   :states '(normal)
   :prefix mpereira/leader
   "ee" #'mpereira/cider-eval-sexp-at-point
   "e(" #'cider-eval-defun-at-point
   "F" #'cider-format-buffer
   "eE" #'cider-eval-buffer
   "en" #'cider-eval-ns-form
   "dd" #'cider-debug-defun-at-point
   "tt" #'cider-test-run-test
   "tr" #'cider-test-rerun-test
   "tT" #'cider-test-run-ns-tests
   "tR" #'cider-test-rerun-failed-tests
   "pt" #'cider-test-run-project-tests)

  (general-define-key
   :keymaps 'cider-mode-map
   :states '(visual)
   :prefix mpereira/leader
   "ee" 'cider-eval-region)

  (general-define-key
   :keymaps 'cider-repl-mode-map
   :states '(insert)
   "C-l" 'cider-repl-clear-buffer))
#+end_src

*** slamhound
Currently disabled because it's only available via Marmalade.

#+begin_src emacs-lisp :tangle yes
;; (use-package slamhound
;;   :after cider)
#+end_src

*** miracle
#+begin_src emacs-lisp :tangle yes
(use-package miracle
  :ensure nil
  :after cider
  :quelpa (miracle
           :fetcher github
           :repo "Saikyun/miracle")
  :config
  (general-define-key
   :keymaps 'miracle-interaction-mode-map
   :states '(normal visual)
   "K" 'miracle-describe
   "gf" 'miracle-jump)

  (defun mpereira/miracle-eval-sexp-at-point ()
    "Evaluate the expression at point."
    (interactive)
    (save-excursion
      (goto-char (cadr (cider-sexp-at-point 'bounds)))
      (miracle-eval-expression-at-point)))

  (general-define-key
   :keymaps 'miracle-interaction-mode-map
   :states '(normal)
   :prefix mpereira/leader
   "e(" #'miracle-eval-defun
   "eE" #'miracle-eval-buffer
   "en" #'miracle-eval-namespace
   "ee" #'mpereira/miracle-eval-sexp-at-point
   "ek" #'miracle-interrupt)

  (general-define-key
   :keymaps 'miracle-mode-map
   :states '(insert)
   "C-l" #'comint-clear-buffer)

  (general-define-key
   :keymaps 'miracle-interaction-mode-map
   :states '(visual)
   :prefix mpereira/leader
   "ee" 'miracle-eval-region))
#+end_src

** Go
*** go-mode
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :config
  (general-define-key
   :keymaps 'go-mode-map
   :states '(normal)
   "K" #'godoc-at-point
   "C-]" #'godef-jump)

  (general-define-key
   :keymaps 'go-mode-map
   :states '(normal)
   :prefix mpereira/leader
   "tt" #'go-test-current-test
   "tT" #'go-test-current-file
   "pt" #'go-test-current-project))
#+end_src

** Rust
*** rust-mode
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :config
  ;; (general-define-key
  ;;  :keymaps '(rust-mode-map)
  ;;  :states '(normal visual)
  ;;  "C-9" 'racer-describe-tooltip
  ;;  "C-K" 'racer-describe-tooltip
  ;;  "C-]" 'racer-find-definition
  ;;  "K" 'racer-describe)
  )
#+end_src

*** racer
Disabled since [2020-05-23 Sat] to try out LSP.

#+begin_src emacs-lisp :tangle yes
(use-package racer
  :disabled
  :config
  (general-define-key
   :states '(normal)
   :keymaps '(racer-help-mode-map)
   "q" 'kill-current-buffer)

  (add-hook 'rust-mode-hook #'racer-mode))
#+end_src

*** flycheck-rust
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-rust
  :after rust-mode
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

*** ob-rust
#+begin_src emacs-lisp :tangle yes
(use-package ob-rust)
#+end_src

** Kotlin
*** kotlin-mode
#+begin_src emacs-lisp :tangle yes
(use-package kotlin-mode)
#+end_src

*** flycheck-kotlin
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-kotlin
  :after kotlin-mode
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-kotlin-setup))
#+end_src

** C#
~omnisharp-install-server~ needs to be run on a first install.

#+begin_src emacs-lisp :tangle yes
(use-package omnisharp
  :after company
  :disabled
  :config
  (remove 'company-omnisharp company-backends)
  (add-to-list 'company-backends 'company-omnisharp))

(use-package csharp-mode
  :after company
  :hook ((csharp-mode . omnisharp-mode)
         (csharp-mode . flycheck-mode)
         (csharp-mode . flycheck-mode)))

(defun seq-first (sequence)
  "Return the first element of SEQUENCE."
  (seq-elt sequence 0))

(use-package lsp-mode
  :hook ((csharp-mode . lsp)))
#+end_src

** JavaScript
#+begin_src emacs-lisp :tangle yes
(setq js-indent-level 2)
#+end_src

** Shell script
#+begin_src emacs-lisp :tangle yes
(add-hook 'sh-mode-hook
          (lambda ()
            (setq-local sh-basic-offset 2)
            (setq-local sh-indentation 2)))
#+end_src

** Python
Install the dependencies:
#+begin_src bash :tangle setup.sh :results verbatim
python3 -m pip install mypy flake8 pylint black
#+end_src

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load "elpy"
  (general-define-key
   :keymaps '(inferior-python-mode-map)
   :states '(insert)
   "C-l" 'mpereira/elpy-shell-clear-shell)

  (setq flycheck-python-mypy-executable "mypy")
  (setq flycheck-python-flake8-executable "python3")
  (setq flycheck-python-pylint-executable "python3")
  (setq flycheck-python-pycompile-executable "python3")
  (setq python-shell-interpreter "python3")

  ;; Disabling to try out LSP.
  ;; (general-define-key
  ;;  :keymaps '(python-mode-map)
  ;;  :states '(normal visual)
  ;;  "C-j" 'elpy-nav-forward-block
  ;;  "C-k" 'elpy-nav-backward-block
  ;;  "S-C-j" 'elpy-nav-move-line-or-region-down
  ;;  "S-C-k" 'elpy-nav-move-line-or-region-up)

  ;; Disabling to try out LSP.
  ;; (general-define-key
  ;;  :keymaps '(python-mode-map)
  ;;  :states '(normal visual)
  ;;  "K" 'elpy-doc)

  ;; Disabling to try out LSP.
  ;; (general-define-key
  ;;  :keymaps '(python-mode-map)
  ;;  :states '(normal visual)
  ;;  :prefix mpereira/leader
  ;;  :infix "f"
  ;;  "o" 'imenu)

  ;; Disabling to try out LSP.
  ;; (general-define-key
  ;;  :keymaps '(python-mode-map)
  ;;  :states '(normal visual)
  ;;  :prefix mpereira/leader
  ;;  :infix "e"
  ;;  "e" 'elpy-shell-send-statement
  ;;  "E" 'elpy-shell-send-buffer
  ;;  "p" 'elpy-shell-send-group)
  )

(setq python-indent-offset 4)

(add-hook 'python-mode-hook
          (lambda ()
            (setq evil-shift-width python-indent-offset)))

(with-eval-after-load 'python
  ;; REVIEW: Where did I get this from?
  ;; (defun python-shell-completion-native-try ()
  ;;   "Return non-nil if can trigger native completion."
  ;;   (let ((python-shell-completion-native-enable t)
  ;;         (python-shell-completion-native-output-timeout
  ;;          python-shell-completion-native-try-output-timeout))
  ;;     (python-shell-completion-native-get-completions
  ;;      (get-buffer-process (current-buffer))
  ;;      nil "_")))
  )
#+end_src

*** elpy
#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :init
  (setq elpy-rpc-python-command "python3")

  ;; https://github.com/jorgenschaefer/elpy/issues/1550#issuecomment-468763310
  (setq elpy-shell-echo-output nil)

  (remove-hook 'elpy-modules 'elpy-module-eldoc)
  (remove-hook 'elpy-modules 'elpy-module-django)

  (setq company-idle-delay-before-elpy-fucks-it-up company-idle-delay)
  (add-hook 'elpy-mode-hook
            (lambda ()
              (setq company-idle-delay company-idle-delay-before-elpy-fucks-it-up)))
  :config
  ;; Disabling [2020-05-23] to try out LSP.
  ;; (elpy-enable)
  )
#+end_src

** JSON
*** json-mode
#+begin_src emacs-lisp :tangle yes
(use-package json-mode)
#+end_src

*** json-navigator
#+begin_src emacs-lisp :tangle yes
(use-package json-navigator)
#+end_src

*** json-snatcher
#+begin_src emacs-lisp :tangle yes
(use-package json-snatcher
  :ensure nil
  :quelpa (json-snatcher
           :fetcher github
           :repo "Sterlingg/json-snatcher")
  :config
  (setq jsons-path-printer #'jsons-print-path-jq))
#+end_src

** Scala
*** scala-mode
#+begin_src emacs-lisp :tangle yes
(use-package scala-mode)
#+end_src

** SQL
#+begin_src emacs-lisp :tangle yes
(require 'sql)

(add-hook 'sql-interactive-mode-hook (lambda () (toggle-truncate-lines t)))
#+end_src

** es-mode
#+begin_src emacs-lisp :tangle yes
(use-package es-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.es$" . es-mode)))
#+end_src

** terraform-mode
#+begin_src emacs-lisp :tangle yes
(use-package terraform-mode)
#+end_src

** docker
#+begin_src emacs-lisp :tangle yes
(use-package docker)
#+end_src

** dockerfile-mode
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :mode "Dockerfile.*\\'")
#+end_src

** literate-calc-mode
#+begin_src emacs-lisp :tangle yes
(use-package literate-calc-mode
  :mode "\\.calc\\'")
#+end_src

* Web development
** web-mode
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (setq web-mode-engines-alist '())

  (setq web-mode-markup-indent-offset 2))
#+end_src

** auto-rename-tag
#+begin_src emacs-lisp :tangle yes
(use-package auto-rename-tag
  :config
  (add-hook 'html-mode-hook #'auto-rename-tag-mode))
#+end_src

** css
#+begin_src emacs-lisp :tangle yes
(setq css-indent-offset 2)
#+end_src

** js2-refactor
#+begin_src emacs-lisp :tangle yes
(use-package js2-refactor
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode))
#+end_src

** rjsx-mode
#+begin_src emacs-lisp :tangle yes
(use-package rjsx-mode
  :mode ("\\.jsx?$" . rjsx-mode)
  :config
  ;; js-mode and js2-mode indent multiline chained function calls like:
  ;;
  ;; foo.
  ;; .bar()
  ;; .baz()
  ;;
  ;; while Prettier indents it like:
  ;;
  ;; foo.
  ;;   .bar()
  ;;   .baz()
  ;;
  ;; Disable aggressive indent for js2-mode to give priority to Prettier auto
  ;; formatting.
  (add-to-list 'aggressive-indent-excluded-modes 'js-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'js2-mode)
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode)))
#+end_src

** emacs-colorpicker
#+begin_src emacs-lisp :tangle yes
;; (use-package colorpicker
;;   :ensure nil
;;   :quelpa (emacs-colorpicker
;;            :fetcher github
;;            :repo "syohex/emacs-colorpicker"))
#+end_src

* Writing prose
** flyspell
#+begin_src emacs-lisp :tangle yes
(use-package flyspell
  :defer 1
  :custom
  ;; TODO: Do I want this?
  ;; (flyspell-abbrev-p t)
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil)
  (flyspell-mode 1))
#+end_src

** flyspell-correct-ivy
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
  :after flyspell
  :bind (:map flyspell-mode-map
         ;; TODO: This mapping is too good... should I use it for something
         ;; else?
         ("C-;" . flyspell-correct-word-generic))
  :custom
  (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

** mw-thesaurus
#+begin_src emacs-lisp :tangle yes
(use-package request)

(use-package mw-thesaurus
  :general
  (:keymaps '(text-mode-map org-mode-map)
   :states '(normal visual)
   "K" #'mw-thesaurus-lookup-at-point)
  (:keymaps '(mw-thesaurus-mode-map)
   :states '(normal visual)
   "q" #'mw-thesaurus--quit)
  :config
  (mw-thesaurus-mode))
#+end_src

** atomic-chrome
#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome
  :config
  (setq atomic-chrome-url-major-mode-alist '(("github\\.com" . gfm-mode)))

  (atomic-chrome-start-server)

  (add-hook 'atomic-chrome-edit-mode-hook #'mpereira/prevent-buffer-kill))
#+end_src

* Distraction-free editing
** hide-mode-line
#+begin_src emacs-lisp :tangle yes
(use-package hide-mode-line)
#+end_src

** olivetti
#+begin_src emacs-lisp :tangle yes
(use-package olivetti
  ;; Don't add to hook until
  ;; https://github.com/hlissner/emacs-hide-mode-line/issues/2 gets fixed.
  ;; :hook (olivetti-mode . hide-mode-line-mode)
  :config
  (setq-default olivetti-body-width 0.5))
#+end_src

* Buffer management
** transpose-frame
#+begin_src emacs-lisp :tangle yes
(use-package transpose-frame)
#+end_src

** buffer-expose
#+begin_src emacs-lisp :tangle yes
(use-package buffer-expose
  :config
  (general-define-key
   :keymaps '(buffer-expose-grid-map)
   "h" 'buffer-expose-left-window
   "l" 'buffer-expose-right-window
   "k" 'buffer-expose-up-window
   "j" 'buffer-expose-down-window
   "0" 'buffer-expose-first-window-in-row
   "$" 'buffer-expose-last-window-in-row
   "g" 'buffer-expose-first-window
   "G" 'buffer-expose-last-window
   "SPC" 'buffer-expose-ace-window
   "]" 'buffer-expose-next-page
   "[" 'buffer-expose-prev-page
   "d" 'buffer-expose-kill-buffer))
#+end_src

** buffer-move
#+begin_src emacs-lisp :tangle yes
(use-package buffer-move)
#+end_src

** rotate
#+begin_src emacs-lisp :tangle yes
(use-package rotate)
#+end_src

** persistent-scratch
#+begin_src emacs-lisp :tangle yes
(use-package persistent-scratch
  :config
  ;; Enables auto save and automatic backup restore.
  (persistent-scratch-setup-default)

  (setq persistent-scratch-autosave-interval 60)

  (defun mpereira/persistent-scratch-scratch-buffer-p ()
    "Return non-nil iff the current buffer's name starts with *scratch*."
    (string-prefix-p "*scratch*" (buffer-name)))

  (setq persistent-scratch-scratch-buffer-p-function
        'mpereira/persistent-scratch-scratch-buffer-p))
#+end_src

** Prevent scratch buffers from being killed
Also start them in Org mode.
#+begin_src emacs-lisp :tangle yes
(setq initial-major-mode (lambda ()
                           (persistent-scratch-mode)
                           (org-mode)))

#+end_src

** =display-buffer-alist= configuration
#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :init
  ;; Inspiration, resources:
  ;; - https://github.com/hlissner/doom-emacs/blob/master/modules/ui/popup/config.el
  ;; - https://web.archive.org/web/20160409014815/https://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html
  ;; - http://juanjose.garciaripoll.com/blog/arranging-emacs-windows
  (setq display-buffer-alist
        '(("\\* Merriam-Webster Thesaurus \\*"
           (display-buffer-below-selected))

          ("\\*hackernews top stories\\*"
           (display-buffer-in-side-window)
           (window-width . 120)
           (side . left)
           (slot . 0)
           (mode-line-format . (" " "%b")))

          ("^\\(\\*help.*\\)$"
           (display-buffer-below-selected))

          ("^\\(\\*lsp-help\\*\\)$"
           (display-buffer-below-selected))

          ("\\(\\Wo\\)?*Man.*"
           (display-buffer-below-selected))

          ("\\*\\(compilation\\|run .*\\)\\*"
           (display-buffer-at-bottom)
           (window-height . 0.3)
           (mode-line-format . (" " "%b")))

          ("\\*\\(rg\\)\\*"
           (display-buffer-at-bottom)
           (window-height . 0.5)
           (mode-line-format . (" " "%b")))

          ("\\*Flycheck.*\\*"
           (display-buffer-below-selected))

          ("\\(\\*undo-tree\\*\\)"
           (display-buffer-in-side-window)
           (window-width . 80)
           (window-height . 0.5)
           (window-parameters . ((split-window . t)))
           (side . left)
           (slot . 0)
           (mode-line-format . (" " "%b")))

          ("\\(\\*undo-tree Diff\\*\\)"
           (display-buffer-in-side-window)
           (window-width . 80)
           (window-height . 0.5)
           (side . left)
           (slot . 1)
           (mode-line-format . (" " "%b"))))))
#+end_src

* Project management
** projectile
#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :config
  (projectile-mode t)

  (setq projectile-enable-caching nil)
  (setq projectile-require-project-root t)
  ;; With this, do I even need counsel-projectile?
  (setq projectile-completion-system 'ivy))
#+end_src

** term-projectile
#+begin_src emacs-lisp :tangle yes
(use-package term-projectile
  :after projectile)
#+end_src

** ibuffer-projectile
#+begin_src emacs-lisp :tangle yes
(use-package ibuffer-projectile
  :after projectile
  :general (:keymaps 'ibuffer-mode-map
            :states '(normal)
            "o" 'ibuffer-toggle-sorting-mode
            "," nil))
#+end_src

** perspective
#+begin_src emacs-lisp :tangle yes
(use-package perspective
  :ensure nil
  :quelpa (perspective
           :fetcher github
           :repo "nex3/perspective-el")
  :init
  (setq persp-show-modestring nil)
  :config
  (persp-mode t))
#+end_src

** counsel
#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :after (ivy swiper)
  :config
  (counsel-mode 1)

  (setq counsel-find-file-ignore-regexp "/vendor/")

  ;; Counsel sets the ivy initial input as a caret for some of its functions. I
  ;; don't want that.
  (setq ivy-initial-inputs-alist nil)

  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable))
#+end_src

** persp-projectile
#+begin_src emacs-lisp :tangle yes
(use-package persp-projectile
  :after perspective projectile
  :config
  (general-define-key
   :states '(normal)
   :prefix mpereira/leader
   :infix "p"
   "p" 'persp-switch-last))
#+end_src

** counsel-projectile
#+begin_src emacs-lisp :tangle yes
(use-package counsel-projectile
  :after (counsel projectile)
  :config
  (setq projectile-switch-project-action 'counsel-projectile-find-file))
#+end_src

** find-file-in-project
#+begin_src emacs-lisp :tangle yes
(use-package find-file-in-project)
#+end_src

* Commands
** amx
Only installing this package for its functions. I get the actual "candidate
recency" functionality for =M-x= from ivy-prescient.

#+begin_src emacs-lisp :tangle yes
(use-package amx
  :config
  (general-define-key
   :keymaps '(global-map)
   "M-X" 'amx-major-mode-commands))
#+end_src

** ivy
#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :general
  (:keymaps 'ivy-switch-buffer-map
   "C-k" 'ivy-previous-line) ;; this is bound to `ivy-switch-buffer-kill' by
                             ;; something.
  (:keymaps 'ivy-minibuffer-map
   "C-j" 'ivy-next-line
   "C-k" 'ivy-previous-line
   "C-f" 'ivy-scroll-up-command
   "C-b" 'ivy-scroll-down-command
   "C-o" 'ivy-occur
   "C-h" 'ivy-beginning-of-buffer
   "C-l" 'ivy-end-of-buffer
   "C-/" 'ivy-restrict-to-matches
   "<escape>" 'minibuffer-keyboard-quit)

  :custom
  (ivy-use-selectable-prompt t)
  (ivy-height 20)
  (ivy-wrap t)

  :config
  (ivy-mode t))
#+end_src

** prescient
#+begin_src emacs-lisp :tangle yes
(use-package prescient
  :config
  (prescient-persist-mode))
#+end_src

** ivy-prescient
#+begin_src emacs-lisp :tangle yes
(use-package ivy-prescient
  :after (ivy counsel amx prescient)
  :config
  (ivy-prescient-mode))
#+end_src

** company-prescient
#+begin_src emacs-lisp :tangle yes
(use-package company-prescient
  :after (company prescient)
  :config
  (company-prescient-mode)

  (add-hook 'prog-mode-hook
            (lambda () (company-prescient-mode -1))))
#+end_src

* Help
** helpful
#+begin_src emacs-lisp :tangle yes
(use-package helpful)
#+end_src

** discover-my-major
#+begin_src emacs-lisp :tangle yes
(use-package discover-my-major)
#+end_src

** which-key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** dash-at-point
#+begin_src emacs-lisp :tangle yes
(use-package dash-at-point
  :config
  )
#+end_src

** command-log-mode
#+begin_src emacs-lisp :tangle yes
(use-package command-log-mode
  :config
  (setq command-log-mode-auto-show t)
  (setq command-log-mode-window-size 60))
#+end_src

* Markup
** markdown-mode
=markdown-mode= also provides =gfm-mode=.

#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :config
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-command "pandoc --from markdown --to html")

  (general-define-key
   :keymaps 'markdown-mode-map
   :states '(normal visual)
   :prefix mpereira/leader
   "oi" 'markdown-insert-link)

  (general-define-key
   :keymaps 'markdown-mode-map
   :states '(normal visual)
   "TAB" 'markdown-cycle
   "(" 'markdown-up-heading
   "k" 'evil-previous-visual-line
   "j" 'evil-next-visual-line
   "C-k" 'markdown-outline-previous-same-level
   "C-j" 'markdown-outline-next-same-level))
#+end_src

** toml-mode
#+begin_src emacs-lisp :tangle yes
(use-package toml-mode)
#+end_src

** yaml-mode
#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml(?:\\.j2)?\\'" . yaml-mode))

  (general-define-key
   :keymaps '(yaml-mode-map)
   :states '(insert)
   "RET" 'newline-and-indent))
#+end_src

** htmlize
#+begin_src emacs-lisp :tangle yes
(use-package htmlize)
#+end_src

** grip-mode
#+begin_src emacs-lisp :tangle yes
(use-package grip-mode)
#+end_src

* Interactions with websites
** counsel-web
#+begin_src emacs-lisp :tangle yes
(use-package counsel-web
  :after counsel
  :ensure nil
  :quelpa (counsel-web
           :fetcher github
           :repo "mnewt/counsel-web")
  :config
  (general-define-key
   :states '(normal)
   :prefix mpereira/leader
   "fg" 'counsel-web-suggest)

  ;; TODO: make `fg' run `counsel-web' on the selection.
  ;; (general-define-key
  ;;  :states '(visual)
  ;;  :prefix mpereira/leader
  ;;  "fg" 'mpereira/counsel-web-selection)
  )
#+end_src

** stackoverflow
#+begin_src emacs-lisp :tangle yes
(require 'json)

(defun mpereira/get-stackoverflow-answers (query)
  "TODO: docstring QUERY."
  (interactive "sQuestion: ")
  (let* ((question_ids
          (with-current-buffer
              (url-retrieve-synchronously
               (concat "https://google.com/search?ie=utf-8&oe=utf-8&hl=en&as_qdr=all&q="
                       (url-hexify-string (concat query " site:stackoverflow.com"))))
            (let (ids)
              (while (re-search-forward "https://stackoverflow.com/questions/\\([0-9]+\\)" nil t)
                (push (match-string-no-properties 1) ids))
              (setq ids (reverse ids))
              (if (> (length ids) 5)
                  (subseq ids 0 5)
                ids))))

         (url_template (format "https://api.stackexchange.com/2.2/questions/%s%%s?site=stackoverflow.com"
                               (string-join question_ids ";")))

         (questions (with-current-buffer
                        (url-retrieve-synchronously
                         (format url_template ""))
                      (goto-char (point-min))
                      (search-forward "\n\n")
                      (append (assoc-default 'items (json-read)) nil)))

         (answers (with-current-buffer
                      (url-retrieve-synchronously
                       (concat (format url_template "/answers")
                               "&order=desc&sort=activity&filter=withbody"))
                    (goto-char (point-min))
                    (search-forward "\n\n")
                    (sort (append (assoc-default 'items (json-read)) nil)
                          (lambda (x y)
                            (> (assoc-default 'score x)
                               (assoc-default 'score y)))))))

    (switch-to-buffer "*stackexchange*")
    (erase-buffer)

    (dolist (question_id (mapcar 'string-to-number question_ids))
      (let ((question (some (lambda (question)
                              (if (equal (assoc-default 'question_id question)
                                         question_id)
                                  question))
                            questions)))
        (insert "<hr><h2 style='background-color:paleturquoise'>Question: "
                (format "<a href='%s'>%s</a>"
                        (assoc-default 'link question)
                        (assoc-default 'title question))
                "</h2>"
                "\n"
                (mapconcat
                 'identity
                 (let ((rendered
                        (remove-if
                         'null
                         (mapcar (lambda (answer)
                                   (if (and (equal question_id
                                                   (assoc-default 'question_id answer))
                                            (>= (assoc-default 'score answer) 0))
                                       (concat "<hr><h2 style='background-color:"
                                               "#c1ffc1'>Answer - score: "
                                               (number-to-string (assoc-default 'score answer))
                                               "</h2>"
                                               (assoc-default 'body answer))))
                                 answers))))
                   (if (> (length rendered) 5)
                       (append (subseq rendered 0 5)
                               (list (format "<br><br><a href='%s'>%s</a>"
                                             (assoc-default 'link question)
                                             "More answers...")))
                     rendered))
                 "\n")
                )))
    (shr-render-region (point-min) (point-max))
    (goto-char (point-min))
    (save-excursion
      (while (search-forward "^M" nil t)
        (replace-match "")))))
#+end_src

** engine-mode
#+begin_src emacs-lisp :tangle yes
(use-package engine-mode
  :config
  (engine-mode t)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")

  (defengine google
    "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine google-images
    "https://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

  (defengine google-maps
    "https://maps.google.com/maps?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")

  (defengine twitter
    "https://twitter.com/search?q=%s")

  (defengine wikipedia
    "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "https://www.wolframalpha.com/input/?i=%s")

  (defengine youtube
    "https://www.youtube.com/results?aq=f&oq=&search_query=%s"))
#+end_src

** google-this
#+begin_src emacs-lisp :tangle yes
(use-package google-this
  :config
  (google-this-mode 1))
#+end_src

** Wolfram Alpha
#+begin_src emacs-lisp :tangle yes
(use-package wolfram
  :config
  (load-file (expand-file-name "wolfram-secrets.el" user-emacs-directory))

  (setq wolfram-alpha-app-id mpereira/secret-wolfram-alpha-app-id)

  (general-define-key
   :keymaps '(global-map)
   :states '(normal visual)
   :prefix mpereira/leader
   :infix "e"
   "w" 'wolfram-alpha))
#+end_src

** hackernews
#+begin_src emacs-lisp :tangle yes
(use-package hackernews)
#+end_src

* Miscellaneous
** suggest
#+begin_src emacs-lisp :tangle yes
(use-package suggest)
#+end_src

** open-junk-file
#+begin_src emacs-lisp :tangle yes
(use-package open-junk-file
  :config
  (setq open-junk-file-directory (concat user-emacs-directory
                                         "junk/%Y/%m/%d/%H%M%S.")))
#+end_src

** gif-screencast
#+begin_src emacs-lisp :tangle yes
(use-package gif-screencast
  :config
  (setq gif-screencast-args '("-x"))
  (setq gif-screencast-cropping-program "mogrify")
  (setq gif-screencast-capture-format "ppm"))
#+end_src

** disk-usage
#+begin_src emacs-lisp :tangle yes
(use-package disk-usage)
#+end_src

** circe
#+begin_src emacs-lisp :tangle yes
(use-package circe
  :general
  (:keymaps '(circe-mode-map)
   "K" 'helpful-at-point)
  :config
  (enable-circe-color-nicks)

  (load-file (expand-file-name "circe-secrets.el" user-emacs-directory))

  ;; Disable name listing when joining channels.
  (circe-set-display-handler "353" 'circe-display-ignore)
  (circe-set-display-handler "366" 'circe-display-ignore)

  ;; Logging.
  (setq lui-logging-directory
        (expand-file-name "irc" mpereira/dropbox-directory))
  (load "lui-logging" nil t)
  (enable-lui-logging-globally)

  ;; Automatic reconnect.
  (setq circe-lagmon-timer-tick 60)
  (load "circe-lagmon" nil t)
  (circe-lagmon-mode)

  ;; Timestamps in margins.
  (setq lui-time-stamp-position 'right-margin)
  (setq lui-time-stamp-format " %H:%M ")
  (defun mpereira/circe-set-margin ()
    (setq right-margin-width 7))
  (add-hook 'lui-mode-hook #'mpereira/circe-set-margin)

  (setq circe-default-nick "mpereira"
        circe-default-user "mpereira"
        circe-default-realname "mpereira")
  (setq circe-default-part-message "Bye.")
  (setq circe-default-quit-message "Bye.")
  (setq circe-reduce-lurker-spam t)
  (setq circe-network-options
        `(("Freenode"
           :host "chat.freenode.net"
           :nickserv-password ,mpereira/secret-circe-nickserv-password
           :tls t
           :channels (:after-auth
                      "#emacs"
                      "#clojure"
                      "##rust"
                      "#haskell")))))
#+end_src

** mingus
#+begin_src emacs-lisp :tangle yes
(use-package mingus
  :config
  (evil-set-initial-state 'mingus-help-mode 'emacs)
  (evil-set-initial-state 'mingus-playlist-mode 'emacs)
  (evil-set-initial-state 'mingus-browse-mode 'emacs)

  (dolist (hook '(mingus-browse-hook
                  mingus-playlist-hooks))
    (add-hook hook 'mpereira/hide-trailing-whitespace)))
#+end_src

** osascripts
#+begin_src emacs-lisp :tangle yes
(use-package osascripts
  :ensure nil
  :quelpa (osascripts
           :fetcher github
           :repo "leoliu/osascripts"))
#+end_src

* Mappings
#+begin_src emacs-lisp :tangle yes
(general-define-key
 :keymaps '(override)                   ; check out `general-override-mode-map'.
 ;; Adding `nil' to the states makes these keybindings work on buffers where
 ;; they would usually not work, e.g. the *Messages* buffer or the
 ;; `undo-tree-visualize' buffer.
 :states '(normal visual insert nil)
 "M-+" #'default-text-scale-increase
 "M--" #'default-text-scale-decrease
 "M-=" #'default-text-scale-reset
 "M-F" #'toggle-frame-fullscreen
 "M-H" 'buf-move-left
 "M-J" 'buf-move-down
 "M-K" 'buf-move-up
 "M-L" 'buf-move-right
 "M-M" #'mpereira/toggle-buffer-maximize
 "M-N" (lambda () (interactive) (mpereira/toggle-buffer-maximize t))
 "M-O" #'transpose-frame
 "M-h" #'evil-window-left
 "M-j" #'evil-window-down
 "M-k" #'evil-window-up
 "M-l" #'evil-window-right
 "C-w =" #'balance-windows              ; this is the default keybinding.
 "<C-left>" #'winner-undo
 "<C-right>" #'winner-redo)

(general-define-key
 "<escape>" #'keyboard-quit)

(general-define-key
 :keymaps '(minibuffer-local-map
            minibuffer-local-ns-map
            minibuffer-local-completion-map
            minibuffer-local-must-match-map
            minibuffer-local-isearch-map)
 "<escape>" #'minibuffer-keyboard-quit)

(general-define-key
 :keymaps '(swiper-map
            swiper-all-map
            ivy-minibuffer-map)
 "<escape>" 'minibuffer-keyboard-quit   ; REVIEW: is this still needed?
 "C-r" 'evil-paste-from-register)

;; REVIEW: do I still need this? Isn't M-x bound in insert mode in the first
;; place and why doesn't this binding work in some modes like
;; `org-src-mode-map', even when specifically adding it in the keymaps?
;;
;; (general-define-key
;;  :keymaps '(global-map)
;;  :states '(insert)
;;  "M-x" #'execute-extended-command)

;; FIXME: this doesn't work.
;; REVIEW: do I still need this?
;; Movement bindings for evil-ex-search. Why doesn't `evil-ex-search-keymap'
;; work for this?
(general-define-key
 :keymaps '(minibuffer-inactive-mode-map)
 "C-k" #'previous-line-or-history-element
 "C-j" #'next-line-or-history-element
 "C-?" #'previous-matching-history-element
 "C-/" #'next-matching-history-element)

;; REVIEW: is this still needed?
;; Make it possible for other modes to use these bindings (e.g. company mode
;; uses it for navigating completions).
(general-define-key
 :keymaps '(evil-insert-state-map)
 "C-j" nil
 "C-k" nil)

;; Non-leader "master" bindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 "C-l" #'evil-ex-nohighlight
 "[c" #'diff-hl-previous-hunk
 "]c" #'diff-hl-next-hunk
 "s" #'avy-goto-char-timer)

;; Non-leader "g" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix "g"
 "q" #'fill-paragraph)

;; TODO: make this not override org mode?
;; (general-define-key
;;  :keymaps '(global-map)
;;  :states '(normal visual)
;;  :prefix "C-c"
;;  "C-o" 'browse-url)

(eval-after-load 'evil-ex
  '(evil-ex-define-cmd "bD" #'mpereira/delete-file-and-buffer))

(eval-after-load 'evil-ex
  '(evil-ex-define-cmd "pwd" #'mpereira/pwd))

;; "Master" bindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; REVIEW: This seems to be working for now. `general-override-mode-map' might
;; be of use in the future.
(general-define-key
 :states '(normal visual)
 :prefix mpereira/leader
 "," #'evil-switch-to-windows-last-buffer
 "." #'ivy-resume
 "/" #'swiper
 "<backtab>" #'discover-my-major
 "<tab>" #'counsel-descbinds
 "=" #'quick-calc
 "B" #'ibuffer
 "b" #'switch-to-buffer
 "D" #'mpereira/bm-counsel-find-bookmark       ; REVIEW: rethink.
 "hs" #'mpereira/split-window-below-and-switch
 "hv" #'mpereira/toggle-window-split           ; REVIEW: rethink.
 "vh" #'mpereira/toggle-window-split           ; REVIEW: rethink.
 "n" #'mpereira/narrow-or-widen-dwim
 "q" #'evil-quit
 "T" #'bm-toggle                               ; REVIEW: rethink.
 "u" #'undo-tree-visualize
 "vs" #'mpereira/split-window-right-and-switch ; REVIEW: rethink.
 "w" #'save-buffer)

;; d -> describe ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; REVIEW: "d" is too good of a key for these bindinds that I never use.
(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "d"
 "b" #'describe-buffer
 "f" #'find-function-on-key
 "k" #'describe-key
 "m" #'describe-mode)

;; e -> evaluate ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "e"
 ":" #'eval-expression
 "v" #'counsel-set-variable)

;; f -> find ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "f"
 ";" #'counsel-minibuffer-history
 ":" #'counsel-expression-history
 "b" #'ivy-switch-buffer
 "c" #'counsel-org-clock-history
 ;; Didn't like `counsel-explorer' from ivy-explorer too much...
 ;; "f" #'counsel-explorer
 "f" #'counsel-find-file
 "k" #'counsel-descbinds
 "l" #'counsel-find-library
 "m" #'describe-keymap
 "n" #'counsel-describe-function
 "o" #'counsel-imenu
 "p" #'package-install
 "v" #'counsel-describe-variable
 "y" #'counsel-yank-pop)

;; g -> git ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal)
 :prefix mpereira/leader
 :infix "g"
 "/" #'counsel-git-log
 "<" #'smerge-keep-mine
 ">" #'smerge-keep-other
 "[" #'git-timemachine-show-previous-revision
 "]" #'git-timemachine-show-next-revision
 "b" #'magit-blame
 "c" #'magit-commit-popup
 "d" #'(lambda ()
         (interactive)
         (let ((display-buffer-alist (append display-buffer-alist
                                             '(("magit-diff.*"
                                                (display-buffer-same-window))))))
           (magit-diff-buffer-file)))
 "D" #'magit-diff-unstaged
 "f" #'magit-find-file
 "g" #'magit-dispatch
 "L" #'magit-log-all
 "l" #'magit-log-buffer-file
 "o" #'mpereira/browse-at-remote
 "p" #'magit-push
 "r" #'diff-hl-revert-hunk
 "s" #'magit-status
 "t" #'git-timemachine-toggle
 "w" #'magit-stage-file
 "W" #'magit-stage-modified)

;; p -> project ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "p"
 "B" 'mpereira/maybe-projectile-ibuffer
 "b" 'mpereira/maybe-projectile-switch-buffer
 "d" 'mpereira/maybe-projectile-dired
 "D" 'mpereira/maybe-projectile-find-directory
 "f" 'mpereira/maybe-projectile-find-file
 "g" 'counsel-rg
 "G" 'rg-project
 "s" 'mpereira/counsel-projectile-perspective-switch-project
 "t" 'dired-sidebar-toggle-sidebar)

;; s -> shell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :states '(normal)
 :prefix mpereira/leader
 :infix "s"
 ">" 'mpereira/eshell-complete-redirect-to-buffer
 "H" 'projectile-run-term
 "c" 'projectile-run-async-shell-command-in-root
 "d" 'mpereira/eshell-complete-recent-directory
 "h" 'mpereira/maybe-projectile-eshell
 "n" (lambda ()
       (interactive)
       (mpereira/call-interactively-with-prefix-arg
        '(4)
        'eshell-show-output)))

;; t -> toggle ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(global-map)
 :states '(normal visual)
 :prefix mpereira/leader
 :infix "t"
 "d" #'toggle-debug-on-error
 "e" #'toggle-debug-on-error
 "l" #'toggle-truncate-lines
 "n" #'mpereira/narrow-or-widen-dwim
 "o" #'mpereira/hs-toggle-all
 "q" #'toggle-debug-on-quit
 "r" #'dired-toggle-read-only
 "t" #'mpereira/narrow-or-widen-dwim
 "w" #'mpereira/narrow-or-widen-dwim)

;; z -> fold ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(hs-minor-mode-map)
 :states '(normal visual)
 :prefix "z"
 "0" #'hs-show-all
 "1" (mpereira/make-hs-hide-level 1)
 "2" (mpereira/make-hs-hide-level 2)
 "3" (mpereira/make-hs-hide-level 3)
 "4" (mpereira/make-hs-hide-level 4)
 "5" (mpereira/make-hs-hide-level 5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(general-define-key
 :keymaps '(hs-minor-mode-map)
 :states '(normal visual)
 "TAB" #'hs-toggle-hiding
 "<S-tab>" #'mpereira/hs-toggle-all)

;; Return to original cursor position when cancelling search.
(general-define-key
 :keymaps '(isearch-mode-map)
 "<escape>" #'isearch-cancel)

(general-define-key
 :keymaps '(evil-ex-search-keymap)
 "<escape>" #'minibuffer-keyboard-quit)

(general-define-key
 :keymaps '(help-mode-map)
 "<" #'help-go-back
 ">" #'help-go-forward)

(general-define-key
 :states '(normal visual)
 :keymaps '(helpful-mode-map deadgrep-mode-map)
 "q" #'mpereira/kill-buffer-and-maybe-window)

(with-eval-after-load "evil-collection"
  (add-hook 'evil-collection-setup
            (lambda ()
              (general-define-key
               :states '(normal visual)
               :keymaps '(dired-mode-map)
               "H" #'evil-window-top
               "L" #'evil-window-bottom))))
#+end_src

* Fun
** fireplace
#+begin_src emacs-lisp :tangle yes
(use-package fireplace)
#+end_src

** let-it-snow
FIXME: Doesn't work. Disabled for now.

#+begin_src emacs-lisp :tangle yes
(use-package snow
  :ensure nil
  :disabled
  :quelpa (snow
           :fetcher github
           :repo "alphapapa/snow.el"))
#+end_src

* Tips and tricks
** org mode file links to search patterns can't start with open parens
https://www.mail-archive.com/emacs-orgmode@gnu.org/msg112359.html
** =EXPRESSION= can be used only once per ~org-agenda-prefix-format~
** Emulate =C-u= (universal-argument)
*** For raw prefix arg (interactive "P")
#+begin_src emacs-lisp :tangle no
(let ((current-prefix-arg '(4)))
  (call-interactively 'some-func))
#+end_src
*** Otherwise
#+begin_src emacs-lisp :tangle no
(let ((current-prefix-arg 4))
  (call-interactively 'some-func))
#+end_src
** After modifying =PATH=
Run ~mpereira/exec-path-from-shell-initialize~ on eshell buffers.
** Terminate init.el loading early
#+begin_src emacs-lisp :tangle no
(with-current-buffer " *load*"
  (goto-char (point-max)))
#+end_src
** Change font: =M-x x-select-font=
** [[https://github.com/d12frosted/elpa-mirror][When melpa.org is down]]

* Sandbox (not tangled)
#+begin_src emacs-lisp :tangle no
(use-package org-super-agenda)
(use-package org-ql)
(use-package ts)

(defun format-org-element (element)
  ;; This essentially needs to do what `org-agenda-format-item' does,
  ;; which is a lot.  We are a long way from that, but it's a start.
  "Return ELEMENT as a string with text-properties set by its property list.
Its property list should be the second item in the list, as
returned by `org-element-parse-buffer'.  If ELEMENT is nil,
return an empty string."
  (setq *element* element)
  (if (not element)
      ""
    (let* ((properties (cadr element))
           ;; Remove the :parent property, which so bloats the size of the
           ;; properties list that it makes it essentially impossible to debug,
           ;; because Emacs takes approximately forever to show it in the
           ;; minibuffer or with `describe-text-properties'. FIXME: Shouldn't be
           ;; necessary anymore since we're not parsing the whole buffer.

           ;; Also, remove ":" from key symbols. FIXME: It would be better to
           ;; avoid this somehow. At least, we should use a function to convert
           ;; plists to alists, if possible.
           (properties (cl-loop for (key val) on properties by #'cddr
                                for symbol = (intern (cl-subseq (symbol-name key) 1))
                                unless (member symbol '(parent))
                                append (list symbol val)))
           ;; TODO: --add-faces is used to add the :relative-due-date property,
           ;; but that fact is hidden by doing it through --add-faces (which calls
           ;; --add-scheduled-face and --add-deadline-face), and doing it in this
           ;; form that gets the title hides it even more. Adding the relative due
           ;; date property should probably be done explicitly and separately
           ;; (which would also make it easier to do it independently of faces,
           ;; etc).
           (title (--> (org-ql-view--add-faces element)
                       (org-element-property :raw-value it)
                       (org-link-display-format it)))
           (todo-keyword (-some--> (org-element-property :todo-keyword element)
                           (org-ql-view--add-todo-face it)))
           ;; FIXME: Figure out whether I should use
           ;; `org-agenda-use-tag-inheritance' or `org-use-tag-inheritance',
           ;; etc.
           (tag-list (if org-use-tag-inheritance
                         ;; FIXME: Note that tag inheritance cannot be used
                         ;; here unless markers are added, otherwise we can't
                         ;; go to the item's buffer to look for inherited tags.
                         ;; (Or does `org-element-headline-parser' parse
                         ;; inherited tags too? I forget...)
                         (if-let ((marker
                                   (or (org-element-property :org-hd-marker element)
                                       (org-element-property :org-marker element))))
                             (with-current-buffer (marker-buffer marker)
                               ;; I wish `org-get-tags' used the correct buffer
                               ;; automatically.
                               (org-get-tags marker (not org-use-tag-inheritance)))
                           ;; No marker found
                           (org-element-property :tags element))
                       (org-element-property :tags element)))
           (tag-string (when tag-list
                         (--> tag-list
                              (s-join ":" it)
                              (s-wrap it ":")
                              (org-add-props it nil 'face 'org-tag))))
           ;;  (category (org-element-property :category element))
           (priority-string (-some->> (org-element-property :priority element)
                              (char-to-string)
                              (format "[#%s]")
                              (org-ql-view--add-priority-face)))
           (habit-property (org-with-point-at (org-element-property :begin element)
                             (when (org-is-habit-p)
                               (org-habit-parse-todo))))
           (due-string (pcase (org-element-property :relative-due-date element)
                         ('nil "foo")
                         (string
                          (format
                           " %s "
                           (org-add-props string nil 'face 'org-ql-view-due-date)))))
           (string (s-join " " (-non-nil (list todo-keyword
                                               priority-string
                                               title
                                               due-string
                                               tag-string)))))
      (remove-list-of-text-properties 0 (length string) '(line-prefix) string)
      ;; Add all the necessary properties and faces to the whole string
      (--> string
           ;; FIXME: Use proper prefix
           (concat "  " it)
           (org-add-props it properties
             'org-agenda-type 'search
             'todo-state todo-keyword
             'tags tag-list
             'org-habit-p habit-property)))))

(org-element-property :relative-due-date *element*)

(defun ts-duration->seconds (duration)
  (let ((seconds (plist-get duration :seconds))
        (minutes (plist-get duration :minutes))
        (hours (plist-get duration :hours))
        (days (plist-get duration :days))
        (years (plist-get duration :years)))
    (+ seconds
       (* 60 minutes)
       (* 3600 hours)
       (* 86400 days)
       (* 31536000 years))))

(--> (org-element-property :closed *element*)
     (ts-parse-org-element it)
     (ts-difference (ts-now) it)
     (ts-human-duration it)
     (plist-put it :hours 0)
     (plist-put it :minutes 0)
     (plist-put it :seconds 0)
     (ts-duration->seconds it)
     (ts-human-format-duration it))

(comment
 (let ((org-agenda-custom-commands
        '(("z" "Agenda"
           ((agenda "" ((org-super-agenda-groups
                         '((:name ""
                            :time-grid t
                            :date today
                            :scheduled today
                            :discard (:not today)
                            :order 1)))
                        (org-agenda-span 'day)
                        (org-agenda-overriding-header
                         (concat
                          "\nToday "
                          "(" (format-time-string "%A, %B %d" (current-time)) ")"))
                        (org-agenda-format-date "")))
            (agenda "" ((org-super-agenda-groups
                         '((:name ""
                            :time-grid t
                            :discard (:not today)
                            :order 2)))
                        (org-agenda-overriding-header "\nNext 7 Days")
                        (org-agenda-start-day "+1d")
                        (org-agenda-span 'week)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-prefix-format " %i %-18c%?-12t% s")))

            (search (concat "SCHEDULED>=\"<+8d>\"&SCHEDULED<=\"<+120d>\""
                            "|"
                            "DEADLINE>=\"<+8d>\"&DEADLINE<=\"<+120d>\""
                            "|"
                            "TIMESTAMP_IA>=\"<+8d>\"&TIMESTAMP_IA<=\"<+120d>\""
                            "|"
                            "TIMESTAMP>=\"<+8d>\"&TIMESTAMP<=\"<+120d>\""
                            "/!")
                    ((org-agenda-overriding-header
                      "\nComing up\n")
                     ;; (org-agenda-prefix-format
                     ;;  " %-18c %(mpereira/org-agenda-tags-suffix)  ")
                     (org-agenda-sorting-strategy '(timestamp-up))
                     (org-agenda-remove-times-when-in-prefix nil))))))))

   (org-agenda nil "z"))

 (let ((org-super-agenda-groups
        '((:name "Done last week"
           :closed :from "last sunday" :to "last saturday")
          (:name "Done this week"
           :closed (between "this sunday" "this saturday")))))
   (org-ql-search (org-agenda-files)
     '(closed)
     :sort '(date)))

 (org-ql-search (org-agenda-files)
   '(and (todo "TODO")
         (not (descendants (todo "NEXT"))))
   :title "Stuck Projects")

 (org-ql-search (org-agenda-files)
   '(and (todo)
         (children)
         (not (children (todo)))))

 (org-ql (org-agenda-files)
   '(ts :from -7 :to today)
   :sort (date priority todo))

 (org-ql (org-agenda-files)
   '(or (scheduled :from +7 :to +100)
        (deadline :from +7 :to +100)
        (ts-active :from +7 :to +100))
   :sort '(ts))

 (org-ql-search (org-agenda-files)
   '(or (ts-active :from +7 :to +100)
        (scheduled :from +7 :to +100)
        (deadline :from +7 :to +100))
   :sort '(ts-active))

 (let ((org-agenda-custom-commands
        `(("x"
           "Someday"
           ((org-ql-block
             (org-ql (org-agenda-files) '(or (scheduled :from +7 :to +100)
                                             (deadline :from +7 :to +100)
                                             (ts-active :from +7 :to +100)))))))))
   (org-agenda nil "x"))

 (let ((org-agenda-custom-commands
        '(("u" "Super view"
           ((agenda "" ((org-super-agenda-groups
                         '((:name "Today"
                            :date today
                            :todo ("TODO")
                            :time-grid t)))))
            ;; (agenda "" ((org-agenda-span 'week)
            ;;             (org-agenda-start-day "+1d")
            ;;             (org-agenda-overriding-header "\nNext 7 Days")
            ;;             (org-super-agenda-groups
            ;;              '((:name "Next 7 Days"
            ;;                 :date "+1d"
            ;;                 :todo ("TODO")
            ;;                 :time-grid t)))))
            ;; (tags "" ((org-agenda-overriding-header "Projects")
            ;;           (org-super-agenda-groups
            ;;            '((:name none  ; Disable super group header
            ;;               :children todo)
            ;;              (:discard (:anything t))))))
            )))))
   (org-agenda-list))

 (org-ql-search (org-agenda-files)
   '(ts :from -7 :to today)
   :title "Recent Items"
   :sort '(date priority todo)
   :groups '((:auto-ts t))))

(defun timestamp->time (timestamp)
  (let* ((year (plist-get timestamp ':year-end))
         (month (plist-get timestamp ':month-end))
         (day (plist-get timestamp ':day-end))
         (hour (plist-get timestamp ':hour-end))
         (minute (plist-get timestamp ':minute-end))
         (second 0))
    (encode-time second minute hour day month year)))

(defun timestamp->date (timestamp)
  (let* ((year (plist-get timestamp ':year-end))
         (month (plist-get timestamp ':month-end))
         (day (plist-get timestamp ':day-end)))
    (list month day year)))

(defun date->timestamp (date)
  (let* ((year (calendar-extract-year date))
         (month (calendar-extract-month date))
         (day (calendar-extract-day date))
         (hour 0)
         (minute 0)
         (second 0))
    (list :year-start year
          :year-end year
          :month-start month
          :month-end month
          :day-start day
          :day-end day
          :hour-start hour
          :hour-end hour
          :minute-start minute
          :minute-end minute
          :second-start second
          :second-end second)))

(defun date->time (date)
  (let* ((year (calendar-extract-year date))
         (month (calendar-extract-month date))
         (day (calendar-extract-day date))
         (hour 0)
         (minute 0)
         (second 0))
    (encode-time second minute hour day month year)))

(defun time->timestamp (raw-time)
  (let* ((time (decode-time raw-time))
         (year (nth 5 time))
         (month (nth 4 time))
         (day (nth 3 time))
         (hour (nth 2 time))
         (minute (nth 1 time))
         (second (nth 0 time)))
    (list :year-start year
          :year-end year
          :month-start month
          :month-end month
          :day-start day
          :day-end day
          :hour-start hour
          :hour-end hour
          :minute-start minute
          :minute-end minute
          :second-start second
          :second-end second)))

(defun time->date (raw-time)
  (let* ((time (decode-time raw-time))
         (year (nth 5 time))
         (month (nth 4 time))
         (day (nth 3 time)))
    (list month day year)))

(time->date (time-subtract (date->time (calendar-current-date))
                           (days-to-time 2)))

(defun timestamp-in-date-interval-p (date-interval timestamp)
  (let* ((start-date (nth 0 date-interval))
         (end-date (nth 1 date-interval)))
    (<= (calendar-absolute-from-gregorian start-date)
        (calendar-absolute-from-gregorian (timestamp->date timestamp))
        (calendar-absolute-from-gregorian end-date))))

;; (timestamp-in-date-interval-p (list (calendar-current-date)
;;                                     (calendar-current-date))
;;                               (time->timestamp (current-time)))

;; (timestamp-at-day-p (time-to-number-of-days (decode-time (current-time))) (time-to-days (decode-time (timestamp->time (time->timestamp (current-time))))))

(defun timestamp-filter (path start-date end-date entries)
  (-filter (lambda (x)
             (let* ((timestamp (get-in path x)))
               (when timestamp
                 (timestamp-in-date-interval-p (list start-date end-date)
                                               timestamp))))
           entries))

(defun day-of-week (date)
  (let ((dow (->> date
                  (date->time)
                  (decode-time)
                  (nth 6))))
    (if (= dow 0)
        6
      (- dow 1))))

(defun beginning-of-week (date)
  (let ((day (day-of-week date)))
    (if (= day 0)
        date
      (time->date (time-subtract (date->time date)
                                 (days-to-time day))))))

(defun beginning-of-month (date)
  (let ((day (calendar-extract-day date)))
    (if (= day 1)
        date
      (time->date (time-subtract (date->time date)
                                 (days-to-time day))))))

(defun minus-days (days date)
  (time->date (time-subtract (date->time date) (days-to-time days))))

(defun closed-today (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (calendar-current-date)
                    (calendar-current-date)
                    entries))

(defun closed-yesterday (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (minus-days 2 (calendar-current-date))
                    (minus-days 1 (calendar-current-date))
                    entries))

(defun closed-this-week-before-today (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (beginning-of-week (calendar-current-date))
                    (minus-days 1 (calendar-current-date))
                    entries))

(defun closed-this-week-before-yesterday (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (beginning-of-week (calendar-current-date))
                    (minus-days 2 (calendar-current-date))
                    entries))

(defun closed-last-week (entries)
  (let ((last-day-of-last-week (minus-days 1 (beginning-of-week (calendar-current-date)))))
    (timestamp-filter '(headline :closed timestamp)
                      (beginning-of-week last-day-of-last-week)
                      last-day-of-last-week
                      entries)))

(defun closed-this-month-before-this-week (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (beginning-of-month (calendar-current-date))
                    (beginning-of-week (calendar-current-date))
                    entries))

(defun closed-this-month (entries)
  (timestamp-filter '(headline :closed timestamp)
                    (beginning-of-month (calendar-current-date))
                    (calendar-current-date)
                    entries))

(ts-now)

(defun get-in (ks coll)
  (if ks
      (get-in (cdr ks) (let ((k (car ks)))
                         (cond
                          ((plist-member coll k) (plist-get coll k))
                          ((integerp k) (nth k coll)))))
    coll))

(comment
 (timestamp->date '(:type inactive
                    :raw-value
                    "[2017-11-03 Fri 15:57]"
                    :year-start
                    2017
                    :month-start
                    11
                    :day-start
                    3
                    :hour-start
                    15
                    :minute-start
                    57
                    :year-end
                    2017
                    :month-end
                    11
                    :day-end
                    3
                    :hour-end
                    15
                    :minute-end
                    57
                    :begin
                    15861
                    :end
                    15884
                    :post-blank
                    1))


 (let ((inhibit-read-only t))
   (with-current-buffer (get-buffer-create "*foo*")
     (erase-buffer)
     (--> (org-ql (org-agenda-files)
            (and (done))
            :sort (date))
          ;; (closed-today it)
          ;; (closed-this-week-before-today it)
          (closed-this-month-before-this-week it)
          (car it)
          (org-ql-view--format-element it)
          ;; (length it)
          ;; (nth 2 it)
          (cl-prettyprint it))
     (pop-to-buffer (current-buffer))))

 (let ((inhibit-read-only t))
   (with-current-buffer (get-buffer-create "*org-ql-complex*")
     (erase-buffer)
     (--each '(("Done today" #'closed-today)
               ("Done yesterday" #'closed-yesterday)
               ;; ("Done this week" #'closed-this-week-before-yesterday)
               ;; ("Done last week" #'closed-last-week)
               ;; ("Done this month" #'closed-this-month)
               )
       (--> (list (car it) (funcall (get-in '(1 1) it)
                                    (org-ql (org-agenda-files)
                                      (done)
                                      :sort (date))))
            (list (car it) (--map (concat (format-org-element it) "\n")
                                  (nth 1 it)))
            (insert (concat (car it)
                            "\n"
                            (concat (apply #'concat (nth 1 it))))
                    "\n")))
     (pop-to-buffer (current-buffer)))))
#+end_src

* File-local variables
These need to be at the end of the file.

# Local Variables:
# before-save-hook: mpereira/configuration-org-tangle-generate-toc-and-byte-compile
# org-adapt-indentation: nil
# End:
